!function(e){var t={};function i(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)i.d(n,o,function(t){return e[t]}.bind(null,o));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=6)}([function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LoggingCommon=t.CachedLogEntry=t.CachedLogEntryType=t.InitializeLogger=t.MMR_ASSERT=t.MMR_WARN=t.MMR_ERR=t.MMR_LOG=void 0;var n=i(2),o=null;t.MMR_LOG=function(e){o.Log(e)},t.MMR_ERR=function(e){o.Error(e)},t.MMR_WARN=function(e){o.Warn(e)},t.MMR_ASSERT=function(e){o.Assert(e)},t.InitializeLogger=function(e){o=e},function(e){e[e.ERROR=1]="ERROR",e[e.WARNING=2]="WARNING",e[e.INFO=3]="INFO"}(t.CachedLogEntryType||(t.CachedLogEntryType={}));var r=function(e,t){this.type=e,this.logString=t};t.CachedLogEntry=r;var a=function(){function e(){}return e.Assert=function(e){return!!e},e.GetAssertLog=function(){var t=(new Error).stack.split("at ")[4].toString().trim(),i=new Object;i.type=e.ASSERT_FAILURE_MESSAGE_TYPE,i.messageType=n.ProxyCommon.BG_HOST_ASSERT_FAILURE_MESSAGE_TYPE,i.fileName=t;var o=t.match(/:(?:\d+):(\d+)[^\d]*$/);return i.line=o?o[1]:0,console.log("MMR_ASSERT: "+t+" Line: "+i.line+" Line object: "+o),i},e.LOGGING_PAGE_TO_CONTENT_EVENT="MsRdcMmrLoggingPageToContent_Message",e.LOGGING_CONTENT_TO_PAGE_EVENT="MsRdcMmrLoggingContentToPage_Message",e.LOGGING_CONTENT_BACKGROUND_PORT="MsRdcMmrLoggingBackgroundComm",e.ASSERT_FAILURE_BACKGROUND_PORT="MsRdcMmrAssertBackgroundComm",e.ASSERT_FAILURE_MESSAGE_TYPE="reportAssertFailure",e.FLUSH_LOGS_MESSAGE_TYPE="flushLogEntries",e}();t.LoggingCommon=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mmrWebRtcStatusToDOMError=t.tryJsonStringify=t.ShimCommon=t.PlaybackPathMode=t.getShimObject=t.shimProxyPropertyName=t.shimPropertyName=t.SourceBufferListProxy=t.TextTrackListProxy=t.createTimeRanges=void 0;var n=i(0);t.createTimeRanges=function(e){var t=e;null==t.forEach&&(t=new Array),t.forEach((function(e,t,i){null==e.start&&(i[t].start=1/0),null==e.end&&(i[t].end=1/0)}));var i=Object.create(TimeRanges.prototype);return Object.defineProperty(i,"length",{get:function(){return t.length}}),i.start=function(e){return t[e].start},i.end=function(e){return t[e].end},i};var o=function(){function e(){this.length=0}return e.prototype.getTrackById=function(e){throw new Error("Method not implemented.")},e.prototype.item=function(e){throw new Error("Method not implemented.")},e.prototype.addEventListener=function(e,t,i){throw new Error("Method not implemented.")},e.prototype.removeEventListener=function(e,t,i){throw new Error("Method not implemented.")},e.prototype[Symbol.iterator]=function(){throw new Error("Method not implemented.")},e.prototype.dispatchEvent=function(e){throw new Error("Method not implemented.")},e}();t.TextTrackListProxy=o;var r,a=function(){function e(t){var i=this;this.sourceBuffers=new Array,this.eventListeners=new Map,this.length=0,this.parentMediaSource=t,e.eventHandlers.forEach((function(e){var t="_on"+e+"eventHandler";Object.defineProperty(i,"on"+e,{get:function(){return this[t]||null},set:function(i){this[t]&&(this.removeEventListener(e,this[t],null),delete this[t]),i&&(this[t]=i,this.addEventListener(e,this[t],null))}})}))}return e.prototype.addEventListener=function(e,t,i){n.MMR_LOG("SourceBufferListProxy::addEventListener - type: "+e),this.eventListeners.has(e)||this.eventListeners.set(e,new Array),this.eventListeners.get(e).push(t),this.parentMediaSource.addEventListener(e,t,i)},e.prototype.removeEventListener=function(e,t,i){n.MMR_LOG("SourceBufferListProxy::removeEventListener - type: "+e);var o=this.eventListeners.get(e);if(null!=o){var r=o.indexOf(t);null!=r&&o.splice(r,1)}this.parentMediaSource.removeEventListener(e,t,i)},e.prototype[Symbol.iterator]=function(){return n.MMR_LOG("SourceBufferListProxy::iterator"),this.sourceBuffers.values()},e.prototype.dispatchEvent=function(e){n.MMR_LOG("SourceBufferListProxy::dispatchEvent - event type: "+e.type);var t=this.eventListeners.get(e.type),i=!1,o=this;return null!=t&&t.forEach((function(t,n,r){null!=t.handleEvent?i=!t.handleEvent():(Object.defineProperty(e,"target",{value:o}),Object.defineProperty(e,"currentTarget",{value:o}),i=!t.apply(o,[e]))})),!(i=i&&e.cancelable)},e.prototype.addSourceBuffer=function(e){n.MMR_LOG("SourceBufferListProxy::addSourceBuffer"),this.sourceBuffers.push(e),this.updateSourceBuffers(),this.dispatchEvent(new CustomEvent("addsourcebuffer"))},e.prototype.removeSourceBuffer=function(e){n.MMR_LOG("SourceBufferListProxy::removeSourceBuffer");var t=this.sourceBuffers.indexOf(e);t>-1&&(this.sourceBuffers.splice(t,1),this.updateSourceBuffers(),this.dispatchEvent(new CustomEvent("removesourcebuffer")))},e.prototype.setSourceBuffers=function(e){this.sourceBuffers=e,this.updateSourceBuffers(),n.MMR_LOG("SourceBufferListProxy::setSourceBuffers - this.length="+this.length)},e.prototype.updateSourceBuffers=function(){var e=this;this.sourceBuffers.forEach((function(t,i,n){e[i]=t})),this.length=this.sourceBuffers.length},e.eventHandlers=["addsourcebuffer","removesourcebuffer"],e}();t.SourceBufferListProxy=a,t.shimPropertyName="MSRDC_MMR_Shim",t.shimProxyPropertyName=t.shimPropertyName+"_Proxy",t.getShimObject=function(e){if(null!=e&&null!=e[t.shimPropertyName])return e[t.shimPropertyName]},function(e){e[e.UNKNOWN=0]="UNKNOWN",e[e.LOCAL=1]="LOCAL",e[e.REMOTE=2]="REMOTE"}(r=t.PlaybackPathMode||(t.PlaybackPathMode={}));var c=function(){function e(){}return e.initialPlaybackPathMode=r.UNKNOWN,e}();t.ShimCommon=c,t.tryJsonStringify=function(e){var t="<failed JSON.stringify parse>";try{t=JSON.stringify(e)}catch(t){n.MMR_LOG("tryJsonStringify failed for obj="+e)}return t},t.mmrWebRtcStatusToDOMError=function(e){var t="The operation failed for an unknown reason",i="UnknownError";switch(e){case-1:t="The object cannot be found",i="NotFoundError";break;case-2:t="The operation is not supported",i="NotSupportedError";break;case-3:t="The object is in an invalid state",i="InvalidStateError";break;case-4:t="The string did not match the expected pattern",i="SyntaxError";break;case-5:t="The object cannot be modified in this way",i="InvalidModificationError";break;case-6:t="The object does not support the operation or argument",i="InvalidAccessError";break;case-7:return TypeError("The type of the object does not match the expected type");case-8:t="A network error occurred",i="NetworkError";break;case-9:t="The operation was aborted",i="AbortError";break;case-10:t="The operation timed out",i="TimeoutError";break;case-11:t="The input/output read operation failed",i="NotReadableError";break;case-13:t="The constraint was not satisfied",i="ConstraintError";break;case-14:t="Provided data is inadequate",i="DataError";break;case-15:t="The operation failed for an operation-specific reason",i="OperationError";break;case-16:t="Not allowed by the user agent",i="NotAllowedError"}return new DOMException(t,i)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.IconStatus=t.ProxyCommon=void 0;var n=function(){function e(){}return e.PROXY_RECEIVE_MESSAGE_EVENT="MsRdcMmrProxy_MessageReceived",e.PROXY_SEND_MESSAGE_EVENT="MsRdcMmrProxy_SendMessage",e.PROXY_SEND_MMR_ENGAGED="MsRdcMmrProxy_MmrEngageMessage",e.PROXY_SEND_SAME_ORIGIN_PARENT_ID="MsRdcMmrProxy_SameOriginParent",e.CONTENT_BG_PROXY_CONNECTION_NAME="MsRdcMmrBackgroundComm",e.CONTENT_BG_CLIENT_CONNECTED_MESSAGE_TYPE="MsRdcMmrBackgroundClientConnected",e.CONTENT_BG_MMR_ACTIVE_MESSAGE_TYPE="MsRdcMmrActive",e.CONTENT_BG_SAME_ORIGIN_PARENT_MESSAGE_TYPE="MsRdcMmrSameOriginParent",e.CONTENT_BG_RECONNECT_MESSAGE_TYPE="MsRdcMmrReconnect",e.NATIVE_MESSAGING_APP_NAME="com.microsoft.msrdcmmrnativehost",e.BG_PROXY_CONVERT_TAB_TITLE_TO_WINDOW="__BG_ConvertTabTitleToWindowFlag__",e.POPUP_BG_PROXY_CONNECTION_NAME="MsRdcMmrProxyBgComm",e.BG_HOST_START_TRACING_MESSAGE_TYPE="startFullTracing",e.BG_HOST_STOP_TRACING_MESSAGE_TYPE="stopFullTracing",e.BG_HOST_FLUSH_LOGS_MESSAGE_TYPE="flushLogs",e.BG_HOST_ASSERT_FAILURE_MESSAGE_TYPE="reportAssertFailure",e.HOST_BG_TRACING_STARTED_MESSAGE_TYPE="onTracingStarted",e.HOST_BG_TRACING_STOPPED_MESSAGE_TYPE="onTracingStopped",e.HOST_BG_LOGS_FLUSH_MESSAGE_TYPE="onFlushLogs",e}();t.ProxyCommon=n,function(e){e[e.NotLoaded=0]="NotLoaded",e[e.LoadFailed=1]="LoadFailed",e[e.Loaded=2]="Loaded",e[e.VideoRedirecting=3]="VideoRedirecting",e[e.CallRedirecting=4]="CallRedirecting"}(t.IconStatus||(t.IconStatus={}))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LocalizedStringHandler=void 0;var n=i(0),o=new Object;o.disconnectedMessage="Please refresh page to resume video playback",o.redirectedMessage="Video is being redirected...",o.redirectionFailedMessage="Video redirection failed";var r=new Object;Object.getOwnPropertyNames(o).forEach((function(e){r[e]=o[e]}));var a=function(){function e(){}return e.dispatchLocalizedStrings=function(){n.MMR_LOG("LocalizedStringHandler::dispatchLocalizedStrings");var e=new Object;Object.getOwnPropertyNames(o).forEach((function(t){e[t]=chrome.i18n.getMessage(t)})),document.dispatchEvent(new CustomEvent("MsRdcMmrProxy_LocalizedStrings",{detail:e}))},e.listenForLocalizedStrings=function(){n.MMR_LOG("LocalizedStringHandler::listenForLocalizedStrings"),document.addEventListener("MsRdcMmrProxy_LocalizedStrings",(function(e){var t=e.detail;Object.getOwnPropertyNames(t).forEach((function(e){r[e]=t[e]}))}))},e.getLocalizedStrings=function(){return r},e}();t.LocalizedStringHandler=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FallbackObjectManager=t.QueueType=void 0;var n,o=i(0);!function(e){e[e.FALLBACK=0]="FALLBACK",e[e.POSTFALLBACK=1]="POSTFALLBACK"}(n=t.QueueType||(t.QueueType={}));var r=function(){function e(){this.nextLocalObjectId=0,this.urlToIdMap=new Map,this.elementToSourceMap=new Map,this.idToMediaSourceMap=new Map,this.fallbackFunctionQueue=new Array,this.postFallbackFunctionQueue=new Array}return e.prototype.addFallbackVideoElement=function(e){o.MMR_LOG("FallbackObjectManager::addFallbackVideoElement - id: "+this.nextLocalObjectId),e.setFallbackObjectId(this.nextLocalObjectId),this.nextLocalObjectId++},e.prototype.addFallbackMediaSource=function(e,t){o.MMR_LOG("FallbackObjectManager::addFallbackMediaSource - id: "+this.nextLocalObjectId+", url: "+t),e.setFallbackObjectId(this.nextLocalObjectId),this.urlToIdMap.set(t,this.nextLocalObjectId),this.idToMediaSourceMap.set(this.nextLocalObjectId,e),this.nextLocalObjectId++},e.prototype.addElementToSourceAssociation=function(e,t){o.MMR_ASSERT(e>=0&&e<this.nextLocalObjectId);var i=this.urlToIdMap.get(t);o.MMR_LOG("FallbackObjectManager::addElementToSourceAssociation - id: "+e+", url: "+t+", sourceId: "+i),null!=i?this.elementToSourceMap.set(e,i):o.MMR_LOG("FallbackObjectManager::addElementToSourceAssociation - mediaSource for url="+t+" does not exist yet")},e.prototype.queueFallbackFunction=function(e,t,i){switch(void 0===i&&(i=n.FALLBACK),o.MMR_ASSERT(e>=0&&e<this.nextLocalObjectId),i){case n.FALLBACK:this.fallbackFunctionQueue.push({id:e,function:t});break;case n.POSTFALLBACK:this.postFallbackFunctionQueue.push({id:e,function:t})}},e.prototype.switchToLocal=function(e){o.MMR_LOG("FallbackObjectManager::switchToLocal - id: "+e),o.MMR_ASSERT(e>=0&&e<this.nextLocalObjectId);var t=this.elementToSourceMap.get(e);if(this.fallbackFunctionQueue=this.filterAndExecuteFunctionQueue(e,t,this.fallbackFunctionQueue),null!=t){var i=this.idToMediaSourceMap.get(t);o.MMR_ASSERT(null!=i),i.switchToLocal()}this.postFallbackFunctionQueue=this.filterAndExecuteFunctionQueue(e,t,this.postFallbackFunctionQueue)},e.prototype.switchToRemote=function(e){o.MMR_LOG("FallbackObjectManager::switchToRemote - id: "+e),o.MMR_ASSERT(e>=0&&e<this.nextLocalObjectId);var t=this.elementToSourceMap.get(e);if(this.fallbackFunctionQueue=this.filterFunctionQueue(e,t,this.fallbackFunctionQueue),null!=t){var i=this.idToMediaSourceMap.get(t);o.MMR_ASSERT(null!=i),i.switchToRemote()}this.postFallbackFunctionQueue=this.filterFunctionQueue(e,t,this.postFallbackFunctionQueue)},e.prototype.filterAndExecuteFunctionQueue=function(e,t,i){return i.filter((function(i){var n=i.id;o.MMR_ASSERT(null!=n);var r=i.function;return o.MMR_ASSERT(null!=r),n!=e&&n!=t||(r(),!1)}))},e.prototype.filterFunctionQueue=function(e,t,i){return i.filter((function(i){var n=i.id;o.MMR_ASSERT(null!=n);var r=i.function;return o.MMR_ASSERT(null!=r),n!=e&&n!=t}))},e}();t.FallbackObjectManager=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MmrInjectionParameterHandler=void 0;var n=i(0),o=function(){function e(){}return e.setParams=function(e){var t=document.createElement("mmr-enabled");t.innerText=e.enableShimming.toString()+";"+e.occlusionSupportVersion.toString()+";"+e.enablePassthrough.toString()+";"+e.webrtcSupportVersion.toString()+";"+e.mmrSupportVersion.toString()+";"+e.contentPortId.toString()+";"+e.enableVideoStatusOverlay.toString()+";"+e.enableVideoOutlines.toString(),(document.head||document.documentElement).prepend(t)},e.readParams=function(){var e={enableShimming:!1,occlusionSupportVersion:0,enablePassthrough:!1,webrtcSupportVersion:0,mmrSupportVersion:0,contentPortId:-1,enableVideoStatusOverlay:!1,enableVideoOutlines:!1},t=document.getElementsByTagName("mmr-enabled");if(0==t.length)n.MMR_ERR("MMR readInjectionParameters: input parameter element missing.");else{var i=t[0].innerText;n.MMR_LOG("MMR readInjectionParameters: input parameters: "+i);var o=i.split(";");"true"===o[0]?e.enableShimming=!0:"false"===o[0]?e.enableShimming=!1:n.MMR_ERR("MMR readInjectionParameters: unexpected input parameter text: "+i),e.occlusionSupportVersion=parseInt(o[1]),"true"===o[2]?e.enablePassthrough=!0:"false"===o[2]?e.enablePassthrough=!1:n.MMR_ERR("MMR readInjectionParameters: unexpected input parameter text: "+i),e.webrtcSupportVersion=parseInt(o[3]),e.mmrSupportVersion=parseInt(o[4]),e.contentPortId=parseInt(o[5]),"true"===o[6]?e.enableVideoStatusOverlay=!0:"false"===o[6]?e.enableVideoStatusOverlay=!1:n.MMR_ERR("MMR readInjectionParameters: unexpected input parameter text: "+i),"true"===o[7]?e.enableVideoOutlines=!0:"false"===o[7]?e.enableVideoOutlines=!1:n.MMR_ERR("MMR readInjectionParameters: unexpected input parameter text: "+i)}return e},e}();t.MmrInjectionParameterHandler=o},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setupShims=t.rootWindowInfoTracker=void 0;var n=i(17),o=i(20),r=i(23),a=i(24),c=i(25),s=i(0),d=i(26),l=i(5),u=i(3),h=i(4),p=i(1),m=i(27),f=i(28),M=i(30),b=i(7),g=i(12);c.RegisterPageLogger();var O=l.MmrInjectionParameterHandler.readParams(),v=O.enableShimming,R=O.occlusionSupportVersion,E=O.webrtcSupportVersion,y=O.mmrSupportVersion,S=O.enableVideoStatusOverlay,L=O.enableVideoOutlines;s.MMR_LOG("MSRDC MMR main loaded - shim enabled: "+v+", occlusion support version: "+R+", WebRTC support version: "+E+", MMR support version: "+y+", videoStatusOverlayEnabled: "+S+", videoOutlinesEnabled: "+L);var T=new r.NativeMessagingPageProxy(O.contentPortId),j=null,k=null,I=new d.RootWindowInfoTracker(T);function _(e){if(y>0||E>1){var t=e.querySelectorAll("video");if(t&&t.length>0){s.MMR_LOG("Shimming existing elements...");for(var i=0;i<t.length;i++)null!=p.getShimObject(t[i])?s.MMR_LOG("Ignoring video node as it is already shimmed."):(s.MMR_LOG("Shimming new video element"),n.setupVideoElementShims(j,k,R,t[i],S,L,E))}}if(E>0){var o=e.querySelectorAll("audio");if(o&&o.length>0){s.MMR_LOG("Shimming existing audio elements...");for(i=0;i<o.length;i++)null!=p.getShimObject(o[i])?s.MMR_LOG("Ignoring audio node as it is already shimmed."):(s.MMR_LOG("Shimming new audio element"),f.setupAudioElementShims(j,k,R,o[i]))}}}function P(){j=new a.RemoteObjectManager(T,E),k=new h.FallbackObjectManager,_(document.documentElement);var e=document.createElement;if(document.createElement_original=e,document.createElement=function(t){if("video"===t||"VIDEO"===t){if(y>0||E>1){var i=e.apply(document,["VIDEO"]);return s.MMR_LOG("Shimming new element..."),n.setupVideoElementShims(j,k,R,i,S,L,E)}}else if(("audio"===t||"AUDIO"===t)&&E>0){i=e.apply(document,["AUDIO"]);return s.MMR_LOG("Shimming new audio element..."),f.setupAudioElementShims(j,k,R,i)}return e.apply(document,arguments)},E>0&&(m.setupMediaDevicesShims(j,k,R),M.setupRTCPeerConnectionShims(j,k,R),b.setupMediaStreamShim(),g.setupWebAudioShims(),f.shimAudioClass(j,k,R)),y>0){var t=URL.createObjectURL;MediaSource;URL.createObjectURL=function(e){s.MMR_LOG("URL.createObjectURL");return 1==e.isMSRDCObject?e.blobURL:t(e)},o.setupMediaSourceShims(j,k)}var i=document;new MutationObserver((function(e,t){for(var i=0,o=e;i<o.length;i++){var r=o[i];if("childList"===r.type)for(var a=0,c=r.addedNodes;a<c.length;a++){var d=c[a];"VIDEO"==d.nodeName?(y>0||E>1)&&(null!=p.getShimObject(d)?s.MMR_LOG("Ignoring added video node as it is already shimmed."):(s.MMR_LOG("Shimming new video element from mutation observer"),n.setupVideoElementShims(j,k,R,d,S,L,E))):"AUDIO"==d.nodeName?E>0&&(null!=p.getShimObject(d)?s.MMR_LOG("Ignoring added audio node as it is already shimmed."):(s.MMR_LOG("Shimming new audio element from mutation observer"),f.setupAudioElementShims(j,k,R,d))):"SOURCE"==d.nodeName?s.MMR_LOG("New video element source node."):"DIV"==d.nodeName?(s.MMR_LOG("Mutation observer found DIV node with id: "+d.id),_(d)):"CNX"==d.nodeName&&(s.MMR_LOG("Mutation observer found CNX node with id: "+d.id),_(d))}}})).observe(i,{childList:!0,subtree:!0})}t.rootWindowInfoTracker=I,u.LocalizedStringHandler.listenForLocalizedStrings(),p.ShimCommon.initialPlaybackPathMode=O.enablePassthrough?p.PlaybackPathMode.LOCAL:p.PlaybackPathMode.UNKNOWN,t.setupShims=P,v&&P()},function(e,t,i){"use strict";var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)});Object.defineProperty(t,"__esModule",{value:!0}),t.createTrackRedirectOnMediaStream=t.setupMediaStreamShim=t.createMediaStreamShim=t.MmrMediaStream=t.MmrEventTarget=void 0;var r=i(11),a=i(0),c=function(){function e(){this.eventListeners=new Map}return e.prototype.addEventListener=function(e,t,i){a.MMR_LOG("MmrEventTarget::addEventListener - type: "+e),null==this.eventListeners[e]&&(this.eventListeners[e]=new Array),this.eventListeners[e].push(t)},e.prototype.removeEventListener=function(e,t,i){a.MMR_LOG("MmrEventTarget::removeEventListener");var n=this.eventListeners[e];if(null!=n){var o=n.indexOf(t);null!=o?(a.MMR_LOG("MmrEventTarget::removeEventListener - removing listener for type: "+e),n.splice(o,1)):a.MMR_WARN("MmrEventTarget::removeEventListener - specified listener not found for type: "+e)}else a.MMR_WARN("MmrEventTarget::removeEventListener - no event listeners registered for type: "+e)},e.prototype.dispatchEvent=function(e){if(a.MMR_LOG("MmrEventTarget::dispatchEvent - event.type: "+e.type),null==e.type)throw"UNSPECIFIED_EVENT_TYPE_ERR";if(null!=this.eventListeners[e.type]){var t=this,i=!1;return this.eventListeners[e.type].forEach((function(n,o,r){i=!t.invokeEventListener(e,n)})),!(i=i&&e.cancelable)}a.MMR_LOG("MmrEventTarget::dispatchEvent - no listeners registered for type: "+e.type)},e.prototype.invokeEventListener=function(e,t){return a.MMR_LOG("MmrEventTarget::invokeEventListener - type: "+e.type),null!=t.handleEvent?t.handleEvent():(Object.defineProperty(e,"target",{value:this.eventTarget}),Object.defineProperty(e,"currentTarget",{value:this.eventTarget}),t(e)),!0},e.prototype.shimEventHandlers=function(e,t){t.forEach((function(t){var i="_on"+t+"eventHandler";Object.defineProperty(e,"on"+t,{get:function(){return e[i]||null},set:function(n){e[i]&&(e.removeEventListener(t,e[i],null),delete e[i]),n&&(e[i]=n,e.addEventListener(t,e[i],null))}})}))},e}();t.MmrEventTarget=c;var s=function(e){function t(t){var i=e.call(this)||this;if(i.isMSRDCObject=!0,i.tracks=[],i.eventTarget=i,i.shimEventHandlers(i,["addtrack","removetrack"]),null==t)a.MMR_LOG("MmrMediaStream: empty constructor");else if(null!=t.length){a.MMR_LOG("MmrMediaStream: constructor called with array of tracks"),t.forEach((function(e){null!=i.getTrackById(e.id)||i.tracks.push(e)}))}else{a.MMR_LOG("MmrMediaStream: constructor called with MediaStream "+t.id),t.getTracks().forEach((function(e){null!=i.getTrackById(e.id)||i.tracks.push(e)}))}return i.id=crypto.randomUUID(),a.MMR_LOG("MmrMediaStream: assigned this id to the new stream: "+i.id),i}return o(t,e),Object.defineProperty(t.prototype,"active",{get:function(){return null!=this.tracks.find((function(e){return"ended"!==e.readyState}))},enumerable:!1,configurable:!0}),t.prototype.addTrack=function(e){a.MMR_LOG("MediaStreamShim::addTrack: stream id: "+this.id+" track id: "+e.id),null!=this.getTrackById(e.id)||(this.tracks.push(e),this.dispatchEvent(new MediaStreamTrackEvent("addtrack",{track:e})))},t.prototype.clone=function(){return a.MMR_LOG("MediaStreamShim::clone, cloning stream with id "+this.id),new MediaStream(this)},t.prototype.getAudioTracks=function(){return a.MMR_LOG("getAudioTracks called on stream with id "+this.id),this.tracks.filter((function(e){return"audio"===e.kind}))},t.prototype.getTrackById=function(e){var t=this.tracks.find((function(t){return t.id===e}));return null!=t?t:null},t.prototype.getTracks=function(){return this.tracks},t.prototype.getVideoTracks=function(){return this.tracks.filter((function(e){return"video"===e.kind}))},t.prototype.removeTrack=function(e){a.MMR_LOG("MediaStreamShim::removeTrack: stream id: "+this.id+" track id: "+e.id);for(var t=-1,i=0;i<this.tracks.length;i++)if(this.tracks[i].id==e.id){t=i;break}-1!=t&&(this.tracks.splice(t,1),this.dispatchEvent(new MediaStreamTrackEvent("removetrack",{track:e})))},t.originalMediaStreamClass=MediaStream,t}(c);t.MmrMediaStream=s,t.createMediaStreamShim=function(e,t){return a.MMR_LOG("Creating shimmed media stream with id "+t),e.id=t,e},t.setupMediaStreamShim=function(){a.MMR_LOG("Shimming MediaStream"),window.MediaStream=s},t.createTrackRedirectOnMediaStream=function(e,t,i,n,o,c){a.MMR_LOG("createTrackRedirectOnMediaStream: Creating MediaStreamTrack with ID: "+i),t.addTrack(r.createTrackRedirect(e,i,n,o,c,!0))}},,,function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setupPassthroughSourceBufferShim=t.setupSourceBufferShim=t.SourceBufferShim=void 0;var n=i(22),o=i(1),r=i(0),a=function(){function e(t,i,a){var c=this;this.remoteObjectManager=t,this.mimeType=i,this.playbackPathMode=o.ShimCommon.initialPlaybackPathMode,r.MMR_LOG("SourceBufferShim::SourceBufferShim - mimeType: "+i),this.sourceBufferRedirect=new n.SourceBufferRedirect(t,this,i,a),this.fallbackFunctionQueue=new Array,this.postFallbackFunctionQueue=new Array,e.eventHandlers.forEach((function(e){var t="_on"+e+"eventHandler";Object.defineProperty(c,"on"+e,{get:function(){return(o.getShimObject(this)?o.getShimObject(this):this)[t]||null},set:function(i){var n=o.getShimObject(this)?o.getShimObject(this):this;n[t]&&(n.removeEventListener(e,n[t],null),delete n[t]),i&&(n[t]=i,n.addEventListener(e,n[t],null))}})}))}return e.prototype.localOrRemoteExecute=function(t,i){var n=o.getShimObject(this)?o.getShimObject(this):this,a=void 0,c=function(){a=n.originalSourceBuffer[t].apply(n.originalSourceBuffer,i)};switch(this.playbackPathMode){case o.PlaybackPathMode.REMOTE:a=n.sourceBufferRedirect[t].apply(n.sourceBufferRedirect,i);break;case o.PlaybackPathMode.UNKNOWN:a=n.sourceBufferRedirect[t].apply(n.sourceBufferRedirect,i),e.postFallbackQueueMethods.includes(t)?n.postFallbackFunctionQueue.push(c):n.fallbackFunctionQueue.push(c);break;case o.PlaybackPathMode.LOCAL:a=c()}return r.MMR_LOG("SourceBufferShim::localOrRemoteExecute - functionName="+t+" args="+i+" return="+a),a},e.prototype.localOrRemoteExecuteFunctions=function(e,t){r.MMR_LOG("SourceBufferShim::localOrRemoteExecuteFunctions");var i=o.getShimObject(this)?o.getShimObject(this):this,n=void 0;switch(this.playbackPathMode){case o.PlaybackPathMode.REMOTE:n=t();break;case o.PlaybackPathMode.UNKNOWN:n=t(),i.fallbackFunctionQueue.push(e);break;case o.PlaybackPathMode.LOCAL:n=e()}return n},e.prototype.setMediaSourceOwner=function(e){r.MMR_LOG("SourceBufferShim:setMediaSourceOwner"),(o.getShimObject(this)?o.getShimObject(this):this).sourceBufferRedirect.setMediaSourceOwner(e)},e.prototype.setFallbackPathMode=function(e){r.MMR_LOG("SourceBufferShim:setFallbackPathMode"),(o.getShimObject(this)?o.getShimObject(this):this).playbackPathMode=e},e.prototype.switchToLocal=function(e){r.MMR_LOG("SourceBufferShim:switchToLocal - playbackPathMode="+this.playbackPathMode);var t=o.getShimObject(this)?o.getShimObject(this):this;t.originalSourceBuffer=e,t.playbackPathMode=o.PlaybackPathMode.LOCAL,t.fallbackFunctionQueue.forEach((function(e){e()})),t.fallbackFunctionQueue=void 0,t.postFallbackFunctionQueue.forEach((function(e){e()})),t.postFallbackFunctionQueue=void 0},e.prototype.switchToRemote=function(){r.MMR_LOG("SourceBufferShim:switchToRemote - playbackPathMode="+this.playbackPathMode);var e=o.getShimObject(this)?o.getShimObject(this):this;r.MMR_ASSERT(e.playbackPathMode==o.PlaybackPathMode.UNKNOWN),e.playbackPathMode=o.PlaybackPathMode.REMOTE,e.fallbackFunctionQueue=void 0,e.postFallbackFunctionQueue=void 0},e.prototype.abort=function(){r.MMR_LOG("SourceBufferShim::abort"),(o.getShimObject(this)?o.getShimObject(this):this).localOrRemoteExecute("abort",[])},e.prototype.appendBuffer=function(e){r.MMR_LOG("SourceBufferShim::appendBuffer"),(o.getShimObject(this)?o.getShimObject(this):this).localOrRemoteExecute("appendBuffer",[e])},e.prototype.remove=function(e,t){r.MMR_LOG("SourceBufferShim::remove"),(o.getShimObject(this)?o.getShimObject(this):this).localOrRemoteExecute("remove",[e,t])},e.prototype.changeType=function(e){var t=o.getShimObject(this)?o.getShimObject(this):this;return r.MMR_LOG("SourceBufferShim::changeType - type: "+e+", currentType: "+t.mimeType),t.mimeType=e,t.localOrRemoteExecute("changeType",[e])},e.prototype.addEventListener=function(e,t,i){r.MMR_LOG("SourceBufferShim::addEventListener - type: "+e);var n=o.getShimObject(this)?o.getShimObject(this):this;if(o.ShimCommon.initialPlaybackPathMode==o.PlaybackPathMode.LOCAL){this.originalSourceBuffer.addEventListener(e,(function(){r.MMR_LOG("SourceBufferShim::addEventListener[LOCAL]::addEventListener - type: "+e+" fired!")}),i)}n.localOrRemoteExecute("addEventListener",[e,t,i])},e.prototype.removeEventListener=function(e,t,i){r.MMR_LOG("SourceBufferShim::removeEventListener - type: "+e),(o.getShimObject(this)?o.getShimObject(this):this).localOrRemoteExecute("removeEventListener",[e,t,i])},e.prototype.dispatchEvent=function(e){return r.MMR_LOG("SourceBufferShim::dispatchEvent - type: "+e.type),(o.getShimObject(this)?o.getShimObject(this):this).localOrRemoteExecute("dispatchEvent",[e])},e.prototype.getLocalObjectId=function(){return(o.getShimObject(this)?o.getShimObject(this):this).sourceBufferRedirect.localObjectId},e.eventHandlers=["abort","error","update","updateend","updatestart"],e.postFallbackQueueMethods=["addEventListener","remoteEventListener"],e}();t.SourceBufferShim=a,t.setupSourceBufferShim=function(e,t,i){var c=new a(e,t,i);c[o.shimPropertyName]=c;var s={get:function(e,t,i){return t==o.shimPropertyName?c:n.SourceBufferRedirect.sourceBufferRedirectAttributes.includes(t)?c.playbackPathMode==o.PlaybackPathMode.LOCAL?(r.MMR_LOG("setupSourceBufferShim::get[LOCAL] - prop="+t),c.originalSourceBuffer[t]):c.sourceBufferRedirect[t]:c[t]},set:function(e,t,i){if(t==o.shimPropertyName)return!0;return c.localOrRemoteExecuteFunctions((function(){c.originalSourceBuffer[t]=i}),(function(){n.SourceBufferRedirect.sourceBufferRedirectAttributes.includes(t)?c.sourceBufferRedirect.setAttribute(t,i):c[t]=i})),!0}},d=new Proxy(c,s);return c[o.shimProxyPropertyName]=d,d},t.setupPassthroughSourceBufferShim=function(e){var t=e;return["abort","appendBuffer","remove","changeType","removeEventListener","dispatchEvent"].forEach((function(e){t[e+"_original"]=t[e],t[e]=function(){return r.MMR_LOG("SourceBufferShim::"+e+"[LOCAL]"),t[e+"_original"].apply(t,arguments)}})),t.addEventListener_original=t.addEventListener,t.addEventListener=function(e,i,n){r.MMR_LOG("SourceBufferShim::addEventListener - type: "+e);var o=function(){r.MMR_LOG("SourceBufferShim::addEventListener[LOCAL]::addEventListener - type: "+e+" fired!")};return t.addEventListener_original.apply(t,[e,o,n]),t.addEventListener_original.apply(t,arguments)},["appendWindowEnd","appendWindowStart","audioTracks","buffered","mode","textTracks","timestampOffset","updating","videoTracks"].forEach((function(e){var i=t.__lookupGetter__(e);null==i&&(i=function(){return t[e+"_noshim_"]});var n=t.__lookupSetter__(e);Object.defineProperty(t,e,{get:function(){var n=i.apply(t);return r.MMR_LOG("SourceBufferShim::get - "+e+"="+n),n},set:function(i){return r.MMR_LOG("SourceBufferShim::set - "+e+"="+i),n.apply(t,[i])}})})),t}},function(e,t,i){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,i=1,n=arguments.length;i<n;i++)for(var o in t=arguments[i])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.createTrackRedirect=t.MediaStreamTrackRedirect=void 0;var o=i(1),r=i(0),a=i(12),c=function(){function e(t,i,n,a,c,s,d){this.remoteObjectManager=t,this.originalTrack=d,this.isolated=!1,this.enabled=!0,this.muted=!1,this.readyState="live",this.localObjectId=0,this.remoteObjectActive=!1,this.settings=null,this.constraints={},r.MMR_LOG("MediaStreamTrackRedirect constructor"),this.label=n,this.id=i,this.kind=c,this.settings=a,this.isCaptureTrack=s,this.capabilities={deviceId:a.deviceId,groupId:a.groupId},d[o.shimPropertyName]=this;var l=this;e.shimmedMethods.forEach((function(e){d[e]=l[e]})),e.shimmedProperties.forEach((function(e){Object.defineProperty(d,e,{get:function(){return l[e]}})}));Object.defineProperty(d,"enabled",{get:function(){return l.enabled},set:function(e){return l.setIdlAttribute("enabled",!!e),!0}}),e.eventHandlers.forEach((function(e){var t="_on"+e+"eventHandler";Object.defineProperty(d,"on"+e,{get:function(){return l[t]||null},set:function(i){return null!=l[t]&&(l.removeEventListener(e,l[t],null),delete l[t]),null!=i&&(l[t]=i,l.addEventListener(e,l[t],null)),!0}})})),this.remoteObjectManager.createObject(this,"MediaStreamTrack",{trackId:i,kind:c,isCaptureTrack:s})}return e.prototype.setLocalObjectId=function(e){this.localObjectId=e},e.prototype.getLocalObjectId=function(){return this.localObjectId},e.prototype.onRemoteObjectCreated=function(){this.remoteObjectActive=!0},e.prototype.invokeEvent=function(e){},e.prototype.invokeEventListener=function(e,t){r.MMR_LOG("MediaStreamTrackRedirect::invokeEventListener - type: "+e.type),"ended"===this.readyState?r.MMR_LOG("MediaStreamTrackRedirect::invokeEventListener: Ignoring event when track is in ended state."):("ended"==e.type?this.setIdlAttribute("readyState","ended"):"muted"==e.type?this.setIdlAttribute("muted",!0):"unmuted"==e.type&&this.setIdlAttribute("muted",!1),null!=t.handleEvent?t.handleEvent():t(e))},e.prototype.setIdlAttribute=function(e,t){if(r.MMR_LOG("MediaStreamTrackRedirect::setIdlAttribute - name: "+e+", value: "+t),"enabled"==e){var i=this.enabled;this.enabled=t,"ended"!==this.readyState&&(i&&!t?this.remoteObjectManager.invokeMethod(this.localObjectId,"disabled",{},(function(e,t){})):!i&&t&&this.remoteObjectManager.invokeMethod(this.localObjectId,"enabled",{},(function(e,t){})))}else this[e]=t},e.prototype.onAttributeUpdate=function(e,t){r.MMR_LOG("MediaStreamTrackRedirect::onAttributeUpdate - name: "+e+", value: "+o.tryJsonStringify(t))},e.prototype.onConnectionEvent=function(e){"clientConnected"==e?r.MMR_LOG("MediaStreamTrackRedirect::onConnectionEvent - clientConnected"):"clientDisconnected"==e&&(this.remoteObjectActive=!1)},e.prototype.applyConstraints=function(e){r.MMR_LOG("MediaStreamTrackRedirect::applyConstraints[BEGIN] - options: "+JSON.stringify(e));var t=o.getShimObject(this)?o.getShimObject(this):this;return null==e&&(e={}),new Promise((function(i,n){r.MMR_LOG("MediaStreamTrackRedirect::applyConstraints[END]");var o=null;void 0!==e.deviceId&&e.deviceId!==t.capabilities.deviceId&&(o=new DOMException("The constraint could not be satisfied","ConstraintError")),void 0!==e.groupId&&e.groupId!==t.capabilities.groupId&&(o=new DOMException("The constraint could not be satisfied","ConstraintError")),null===o?(t.constraints=e,i()):n(o)}))},e.prototype.clone=function(){return r.MMR_LOG("MediaStreamTrackRedirect::clone - returning same track"),(o.getShimObject(this)?o.getShimObject(this):this).originalTrack},e.prototype.getCapabilities=function(){var e=o.getShimObject(this)?o.getShimObject(this):this;return n({},e.capabilities)},e.prototype.getConstraints=function(){var e=o.getShimObject(this)?o.getShimObject(this):this;return n({},e.constraints)},e.prototype.getSettings=function(){var e=o.getShimObject(this)?o.getShimObject(this):this;return n({},e.settings)},e.prototype.stop=function(){var e=o.getShimObject(this)?o.getShimObject(this):this;"ended"!==e.readyState&&(e.remoteObjectManager.invokeMethod(e.localObjectId,"stop",{},(function(e,t){})),e.setIdlAttribute("readyState","ended"))},e.prototype.addEventListener=function(e,t,i){r.MMR_LOG("MediaStreamTrackRedirect::addEventListener - type: "+e);var n=o.getShimObject(this)?o.getShimObject(this):this;n.remoteObjectManager.addEventListener(n.localObjectId,e,t,i)},e.prototype.removeEventListener=function(e,t,i){r.MMR_LOG("MediaStreamTrackRedirect::removeEventListener - type: "+e);var n=o.getShimObject(this)?o.getShimObject(this):this;n.remoteObjectManager.removeEventListener(n.localObjectId,e,t,i)},e.prototype.dispatchEvent=function(e){r.MMR_LOG("MediaStreamTrackRedirect::dispatchEvent - type: "+e.type);var t=o.getShimObject(this)?o.getShimObject(this):this;return t.remoteObjectManager.dispatchEvent(t.localObjectId,e)},e.audioContext=null,e.eventHandlers=["ended","mute","unmute"],e.shimmedMethods=["applyConstraints","clone","getCapabilities","getConstraints","getSettings","stop","addEventListener","removeEventListener","dispatchEvent"],e.shimmedProperties=["id","kind","label","muted","readyState"],e}();t.MediaStreamTrackRedirect=c,t.createTrackRedirect=function(e,t,i,n,o,s){r.MMR_LOG("createTrackRedirect: Creating MediaStreamTrack with ID: "+t),null==c.audioContext&&(c.audioContext=new a.MmrAudioContext.originalAudioContextClass);var d=c.audioContext.createMediaStreamDestination().stream.getAudioTracks()[0];return new c(e,t,i,n,o,s,d),d}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setupWebAudioShims=t.MmrAudioContext=void 0;var n=i(1),o=i(0),r=function(){function e(t){this.audioContextInstance=new e.originalAudioContextClass(t)}return e.prototype.createMediaStreamSource=function(e){if(!0!==e.isMSRDCObject)return o.MMR_LOG("createMediaStreamSource: invoked with non-WebRTC stream"),this.audioContextInstance.createMediaStreamSource(e);var t=new MediaStreamAudioDestinationNode(this.audioContextInstance);o.MMR_LOG("createMediaStreamSource: replacing WebRTC stream with silent track id: "+t.stream.getAudioTracks()[0].id);var i=this.audioContextInstance.createMediaStreamSource(t.stream);return o.MMR_LOG("createMediaStreamSource: sourceNode has stream id: "+i.mediaStream.id+" and track id: "+i.mediaStream.getAudioTracks()[0].id),i},e.prototype.createMediaStreamTrackSource=function(e){if(null==e[n.shimPropertyName])return o.MMR_LOG("createMediaStreamTrackSource: invoked with non-WebRTC track"),this.audioContextInstance.createMediaStreamTrackSource(e);var t=new MediaStreamAudioDestinationNode(this.audioContextInstance).stream.getAudioTracks()[0];return o.MMR_LOG("createMediaStreamTrackSource: replacing WebRTC track with silent track id: "+t.id),this.audioContextInstance.createMediaStreamTrackSource(t)},e.prototype.createMediaStreamDestination=function(){return this.audioContextInstance.createMediaStreamDestination()},Object.defineProperty(e.prototype,"baseLatency",{get:function(){return this.audioContextInstance.baseLatency},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"outputLatency",{get:function(){return this.audioContextInstance.outputLatency},enumerable:!1,configurable:!0}),e.prototype.close=function(){return this.audioContextInstance.close()},e.prototype.createMediaElementSource=function(e){return this.audioContextInstance.createMediaElementSource(e)},e.prototype.getOutputTimestamp=function(){return this.audioContextInstance.getOutputTimestamp()},e.prototype.resume=function(){return this.audioContextInstance.resume()},e.prototype.suspend=function(){return this.audioContextInstance.suspend()},e.prototype.addEventListener=function(e,t,i){return this.audioContextInstance.addEventListener(e,t,i)},e.prototype.removeEventListener=function(e,t,i){return this.audioContextInstance.removeEventListener(e,t)},Object.defineProperty(e.prototype,"audioWorklet",{get:function(){return this.audioContextInstance.audioWorklet},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"currentTime",{get:function(){return this.audioContextInstance.currentTime},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"destination",{get:function(){return o.MMR_LOG("*** destination property was queried."),this.audioContextInstance.destination},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"listener",{get:function(){return this.audioContextInstance.listener},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onstatechange",{get:function(){return this._onstatechangeeventHandler},set:function(e){null!=this._onstatechangeeventHandler&&(this.audioContextInstance.removeEventListener("statechange",this._onstatechangeeventHandler,null),delete this._onstatechangeeventHandler),null!=e&&(this._onstatechangeeventHandler=e,this.audioContextInstance.addEventListener("statechange",this._onstatechangeeventHandler,null))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"sampleRate",{get:function(){return this.audioContextInstance.sampleRate},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"state",{get:function(){return this.audioContextInstance.state},enumerable:!1,configurable:!0}),e.prototype.createAnalyser=function(){return this.audioContextInstance.createAnalyser()},e.prototype.createBiquadFilter=function(){return this.audioContextInstance.createBiquadFilter()},e.prototype.createBuffer=function(e,t,i){return this.audioContextInstance.createBuffer(e,t,i)},e.prototype.createBufferSource=function(){return this.audioContextInstance.createBufferSource()},e.prototype.createChannelMerger=function(e){return this.audioContextInstance.createChannelMerger(e)},e.prototype.createChannelSplitter=function(e){return this.audioContextInstance.createChannelSplitter(e)},e.prototype.createConstantSource=function(){return this.audioContextInstance.createConstantSource()},e.prototype.createConvolver=function(){return this.audioContextInstance.createConvolver()},e.prototype.createDelay=function(e){return this.audioContextInstance.createDelay(e)},e.prototype.createDynamicsCompressor=function(){return this.audioContextInstance.createDynamicsCompressor()},e.prototype.createGain=function(){return this.audioContextInstance.createGain()},e.prototype.createIIRFilter=function(e,t){return this.audioContextInstance.createIIRFilter(e,t)},e.prototype.createOscillator=function(){return this.audioContextInstance.createOscillator()},e.prototype.createPanner=function(){return this.audioContextInstance.createPanner()},e.prototype.createPeriodicWave=function(e,t,i){return this.audioContextInstance.createPeriodicWave(e,t,i)},e.prototype.createScriptProcessor=function(e,t,i){return this.audioContextInstance.createScriptProcessor(e,t,i)},e.prototype.createStereoPanner=function(){return this.audioContextInstance.createStereoPanner()},e.prototype.createWaveShaper=function(){return this.audioContextInstance.createWaveShaper()},e.prototype.decodeAudioData=function(e,t,i){return this.audioContextInstance.decodeAudioData(e,t,i)},e.prototype.dispatchEvent=function(e){return this.audioContextInstance.dispatchEvent(e)},e.originalAudioContextClass=AudioContext,e}();t.MmrAudioContext=r,t.setupWebAudioShims=function(){o.MMR_LOG("Shimming Web Audio"),window.AudioContext=r}},,,,,function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setupVideoElementShims=t.VideoElementShim=void 0;var n=i(1),o=i(18),r=i(4),a=i(0),c=function(){function e(t,i,r,c,s,d,l){this.remoteObjectManager=t,this.fallbackObjectManager=i,this.originalElement=c,this.webrtcSupportVersion=l,this.duration=NaN,this.readyState=0,this.seeking=!1,this.HAVE_NOTHING=0,this.HAVE_METADATA=1,this.HAVE_CURRENT_DATA=2,this.HAVE_FUTURE_DATA=3,this.HAVE_ENOUGH_DATA=4,this.NETWORK_EMPTY=0,this.NETWORK_IDLE=1,this.NETWORK_LOADING=2,this.NETWORK_NO_SOURCE=3,this.nodeType=Node.ELEMENT_NODE,this.tagName="video",this.originalSetters={},this.sourceChildObserver=null,this.sourceChildAttributeObserver=null,this.sourceNodes=[],this.playbackPathMode=n.ShimCommon.initialPlaybackPathMode,a.MMR_LOG("VideoElementShim::VideoElementShim playbackPathMode="+this.playbackPathMode),this.playbackPathMode!=n.PlaybackPathMode.LOCAL&&(this.videoElementRedirect=new o.VideoElementRedirect(t,c,r,s,d)),this.ownerDocument=window.document,this.videoWidth=1920,this.videoHeight=1080,this.textTracks=new n.TextTrackListProxy,this.buffered=n.createTimeRanges(new Object),this.seekable=n.createTimeRanges(new Object),this.fallbackObjectManager.addFallbackVideoElement(this),this.originalElement[n.shimPropertyName]=this;var u=this;e.shimmedMethods.forEach((function(e){u[e+"_original"]=c[e],c[e]=u[e]})),this.setIdlAttribute_original=function(e,t){return null!=u.originalSetters["set_"+e+"_original"]?u.originalSetters["set_"+e+"_original"].apply(c,[t]):(c[e+"_noshim_"]=t,!0)},e.shimmedProperties.forEach((function(t){e.boolShimmedProperties.includes(t)?u[t]=!!c[t]:u[t]=c[t];var i=c.__lookupGetter__(t);null==i&&(i=function(){return c[t+"_noshim_"]}),u.originalSetters["set_"+t+"_original"]=c.__lookupSetter__(t);var o=e.boolShimmedProperties.includes(t)?function(e){u.setIdlAttribute(t,!!e)}:function(e){u.setIdlAttribute(t,e)};Object.defineProperty(c,t,{get:function(){var e;return e=u.playbackPathMode==n.PlaybackPathMode.LOCAL?i.apply(c):u[t],a.MMR_LOG("VideoElementShim["+u.fallbackObjectId+"]::get - "+t+"="+e),e},set:function(e){return a.MMR_LOG("VideoElementShim["+u.fallbackObjectId+"]::set - "+t+"="+e),o(e),!0},enumerable:!0})})),e.shimmedStyleProperties.forEach((function(e){u[e]=c.style[e]})),u.get_style_original=c.__lookupGetter__("style");var h={get:function(t,i,n){return a.MMR_LOG("VideoElementShim["+t.fallbackObjectId+"].style::get - "+i),e.shimmedStyleProperties.includes(i)?u[i]:u.get_style_original.apply(c)[i]},set:function(t,i,n){(a.MMR_LOG("VideoElementShim["+t.fallbackObjectId+"].style::set - "+i),e.shimmedStyleProperties.includes(i))?u[i]=n:u.get_style_original.apply(c)[i]=n;return!0}};if(this.style=new Proxy(this,h),Object.defineProperty(c,"style",{get:function(){return a.MMR_LOG("VideoElementShim["+u.fallbackObjectId+"]::get - style"),u.style},enumerable:!0}),e.eventHandlers.forEach((function(e){var t="_on"+e+"eventHandler";Object.defineProperty(c,"on"+e,{get:function(){return u[t]||null},set:function(i){return null!=u[t]&&(u.removeEventListener(e,u[t],null),delete u[t]),null!=i&&(u[t]=i,u.addEventListener(e,u[t],null)),!0}})})),this.playbackPathMode!=n.PlaybackPathMode.LOCAL)for(var p=0;p<c.attributes.length;p++){var m=c.attributes[p];if(e.boolShimmedProperties.includes(m.name)){var f=void 0!==m.value;this.videoElementRedirect.setIdlAttribute(m.name,f)}else this.videoElementRedirect.setIdlAttribute(m.name,m.value)}c.childNodes.forEach((function(e){"SOURCE"==e.nodeName&&(a.MMR_LOG("VideoElementShim::VideoElementShim found source childNode"),u.onSourceNodeAdded(e))}));this.sourceChildObserver=new MutationObserver((function(e,t){for(var i=0,n=e;i<n.length;i++){var o=n[i];if("childList"===o.type)for(var r=0,c=o.addedNodes;r<c.length;r++){var s=c[r];if("SOURCE"==s.nodeName){a.MMR_LOG("VideoElementShim::VideoElementShim source childNode is added"),u.onSourceNodeAdded(s);break}}}})),this.sourceChildObserver.observe(c,{childList:!0,subtree:!0}),setTimeout((function(){a.MMR_LOG("VideoElementShim switchToRemote 10 sec timeout"),u.switchToRemote()}),1e4)}return e.prototype.localOrRemoteExecute=function(t,i){var o=this;a.MMR_ASSERT(e.shimmedMethods.includes(t)||"setIdlAttribute"==t);var c=void 0,s=function(){return o[t+"_original"].apply(o.originalElement,i)};switch(this.playbackPathMode){case n.PlaybackPathMode.REMOTE:c=this.videoElementRedirect[t].apply(this.videoElementRedirect,i);break;case n.PlaybackPathMode.UNKNOWN:c=this.videoElementRedirect[t].apply(this.videoElementRedirect,i),e.postFallbackQueueMethods.includes(t)?this.fallbackObjectManager.queueFallbackFunction(this.fallbackObjectId,s,r.QueueType.POSTFALLBACK):this.fallbackObjectManager.queueFallbackFunction(this.fallbackObjectId,s);break;case n.PlaybackPathMode.LOCAL:c=s()}return a.MMR_LOG("VideoElementShim["+this.fallbackObjectId+"]::localOrRemoteExecute - functionName="+t+" args="+i+" return="+c+" playbackPathMode="+this.playbackPathMode),c},e.prototype.localOrRemoteExecuteFunctions=function(e,t){switch(this.playbackPathMode){case n.PlaybackPathMode.REMOTE:return t();case n.PlaybackPathMode.UNKNOWN:return this.fallbackObjectManager.queueFallbackFunction(this.fallbackObjectId,e),t();case n.PlaybackPathMode.LOCAL:return e()}},e.prototype.setFallbackObjectId=function(e){a.MMR_LOG("VideoElementShim["+this.fallbackObjectId+"]::setFallbackObjectId - fallbackObjectId: "+e),this.fallbackObjectId=e},e.prototype.switchToLocal=function(e){void 0===e&&(e="Unknown."),a.MMR_LOG("VideoElementShim["+this.fallbackObjectId+"]::switchToLocal - playbackPathMode="+this.playbackPathMode+" message="+e),this.playbackPathMode==n.PlaybackPathMode.UNKNOWN&&(this.videoElementRedirect.cancelRemote(e),this.playbackPathMode=n.PlaybackPathMode.LOCAL,this.fallbackObjectManager.switchToLocal(this.fallbackObjectId))},e.prototype.switchToRemote=function(){a.MMR_LOG("VideoElementShim["+this.fallbackObjectId+"]::switchToRemote - playbackPathMode="+this.playbackPathMode),this.playbackPathMode==n.PlaybackPathMode.UNKNOWN&&(this.playbackPathMode=n.PlaybackPathMode.REMOTE,this.fallbackObjectManager.switchToRemote(this.fallbackObjectId))},e.prototype.setContentAttribute=function(e,t){a.MMR_LOG("VideoElementShim["+this.fallbackObjectId+"]::setContentAttribute - name: "+e+", value: "+t),this.setAttribute_original.apply(this.originalElement,[e,t])},e.prototype.setIdlAttribute=function(e,t){a.MMR_LOG("VideoElementShim["+this.fallbackObjectId+"]::setIdlAttribute - name: "+e+", value: "+t),"currentTime"==e&&this.currentTime!=t&&(this.seeking=!0),this.setAttributeOnShim(e,t),this.playbackPathMode==n.PlaybackPathMode.UNKNOWN&&("srcObject"==e&&this.webrtcSupportVersion<2?this.switchToLocal("VideoElementShim srcObject attribute was set."):"src"==e&&this.fallbackObjectManager.addElementToSourceAssociation(this.fallbackObjectId,t)),this.localOrRemoteExecute("setIdlAttribute",[e,t]),"src"==e&&""==t&&this.sourceNodes.length>0&&this.checkAndSetSrcFromSourceNode(this.sourceNodes[0])},e.prototype.setAttributeOnShim=function(t,i){var o=n.getShimObject(this)?n.getShimObject(this):this,r=i;e.boolShimmedProperties.includes(t)&&(r=!!i),o[t]=r},e.prototype.onSourceNodeAdded=function(e){if(a.MMR_LOG("VideoElementShim::onSourceNodeAdded"),this.sourceNodes.push(e),1==this.sourceNodes.length){this.checkAndSetSrcFromSourceNode(e);var t=this;this.sourceChildAttributeObserver=new MutationObserver((function(i,n){for(var o=0,r=i;o<r.length;o++){"src"==r[o].attributeName&&t.checkAndSetSrcFromSourceNode(e)}})),this.sourceChildAttributeObserver.observe(e,{attributes:!0})}},e.prototype.checkAndSetSrcFromSourceNode=function(e){null!=this.src&&""!=this.src||""==e.src||(a.MMR_LOG("VideoElementShim::checkAndSetSrcFromSourceNode "+e.src),this.fallbackObjectManager.addElementToSourceAssociation(this.fallbackObjectId,e.src),this.playbackPathMode!=n.PlaybackPathMode.LOCAL&&this.videoElementRedirect.setIdlAttribute("src",e.src))},e.prototype.setAttribute=function(t,i){var o=n.getShimObject(this)?n.getShimObject(this):this;if(a.MMR_LOG("VideoElementShim["+o.fallbackObjectId+"]::setAttribute - name: "+t+", value: "+i),o.setContentAttribute(t,i),o.playbackPathMode!=n.PlaybackPathMode.LOCAL)if(e.boolShimmedProperties.includes(t)){var r=void 0!==i;o.videoElementRedirect.setIdlAttribute(t,r)}else o.videoElementRedirect.setIdlAttribute(t,i);o.setAttributeOnShim(t,i)},e.prototype.removeAttribute=function(e){var t=n.getShimObject(this)?n.getShimObject(this):this;a.MMR_LOG("VideoElementShim["+t.fallbackObjectId+"]::removeAttribute - name: "+e),t.removeAttribute_original.apply(t.originalElement,[e]),t.setAttributeOnShim(e,t.originalElement[e])},e.prototype.getVideoPlaybackQuality=function(){var e=n.getShimObject(this)?n.getShimObject(this):this;return e.playbackPathMode==n.PlaybackPathMode.LOCAL?e.getVideoPlaybackQuality_original.apply(e.originalElement):e.videoElementRedirect.getVideoPlaybackQuality()},e.prototype.pause=function(){var e=n.getShimObject(this)?n.getShimObject(this):this;a.MMR_LOG("VideoElementShim["+e.fallbackObjectId+"]::pause"),e.playbackPathMode!=n.PlaybackPathMode.LOCAL&&(n.getShimObject(this).paused=!0),e.localOrRemoteExecute("pause",[])},e.prototype.setMediaKeys=function(e){var t=n.getShimObject(this)?n.getShimObject(this):this;return a.MMR_LOG("VideoElementShim["+t.fallbackObjectId+"]::setMediaKeys"),null!=e&&t.playbackPathMode==n.PlaybackPathMode.UNKNOWN&&t.switchToLocal("VideoElementShim setMediaKeys was called."),t.playbackPathMode==n.PlaybackPathMode.LOCAL?t.setMediaKeys_original.apply(t.originalElement,[e]):(console.warn("VideoElement: Unimplemented MSRDC shim method"),new Promise((function(){})))},e.prototype.play=function(){var e=n.getShimObject(this)?n.getShimObject(this):this;return a.MMR_LOG("VideoElementShim["+e.fallbackObjectId+"]::play"),e.playbackPathMode!=n.PlaybackPathMode.LOCAL&&(n.getShimObject(this).paused=!1),new Promise((function(t,i){e.localOrRemoteExecuteFunctions((function(){e.play_original.apply(e.originalElement).then((function(e){t()})).catch((function(e){i(e)}))}),(function(){e.videoElementRedirect.play().then((function(e){t()})).catch((function(e){i(e)}))}))}))},e.prototype.setSinkId=function(e){var t=n.getShimObject(this)?n.getShimObject(this):this;return a.MMR_LOG("VideoElementShim["+this.fallbackObjectId+"]::setSinkId: elementId: "+t.originalElement.id),new Promise((function(i,n){t.localOrRemoteExecuteFunctions((function(){a.MMR_LOG("Accepting the requested device id when executing setSinkId on local element"),i()}),(function(){t.videoElementRedirect.setSinkId(e).then((function(e){i()})).catch((function(e){n(e)}))}))}))},e.prototype.canPlayType=function(e){var t=n.getShimObject(this)?n.getShimObject(this):this,i=t.canPlayType_original.apply(t.originalElement,[e]);return console.warn("VideoElement: Unimplemented MSRDC shim method"),a.MMR_LOG("VideoElementShim["+t.fallbackObjectId+"]: canplayType type="+e+" ret="+i),i},e.prototype.load=function(){var e=n.getShimObject(this)?n.getShimObject(this):this;a.MMR_LOG("VideoElementShim["+e.fallbackObjectId+"]::load"),e.localOrRemoteExecute("load",[])},e.prototype.addEventListener=function(e,t,i){var o=n.getShimObject(this)?n.getShimObject(this):this;if(a.MMR_LOG("VideoElementShim["+o.fallbackObjectId+"]::addEventListener - type: "+e),n.ShimCommon.initialPlaybackPathMode==n.PlaybackPathMode.LOCAL){var r=function(){a.MMR_LOG("VideoElementShim["+o.fallbackObjectId+"][LOCAL]::addEventListener - type: "+e+" fired!")};o.removeEventListener_original.apply(o.originalElement,[e,r,i]),o.addEventListener_original.apply(o.originalElement,[e,r,i])}return o.addEventListener_original.apply(o.originalElement,[e,t,i])},e.prototype.removeEventListener=function(e,t,i){var o=n.getShimObject(this)?n.getShimObject(this):this;return a.MMR_LOG("VideoElementShim["+o.fallbackObjectId+"]::removeEventListener - type: "+e),o.removeEventListener_original.apply(o.originalElement,[e,t,i])},e.prototype.dispatchEvent=function(e){var t=n.getShimObject(this)?n.getShimObject(this):this;return a.MMR_LOG("VideoElementShim["+t.fallbackObjectId+"]::dispatchEvent - type: "+e.type),t.dispatchEvent_original.apply(t.originalElement,[e])},e.eventHandlers=["abort","canplay","canplaythrough","durationchange","emptied","ended","error","loadeddata","loadedmetadata","loadstart","pause","play","playing","progress","ratechange","seeked","seeking","stalled","suspend","timeupdate","volumechange","waiting"],e.shimmedMethods=["setAttribute","removeAttribute","play","pause","setMediaKeys","setSinkId","canPlayType","load","getVideoPlaybackQuality","addEventListener","removeEventListener","dispatchEvent"],e.shimmedProperties=o.VideoElementRedirect.redirectAttributes,e.boolShimmedProperties=o.VideoElementRedirect.boolRedirectAttributes,e.shimmedStyleProperties=["opacity"],e.postFallbackQueueMethods=["addEventListener","removeEventListener"],e}();t.VideoElementShim=c,t.setupVideoElementShims=function(e,t,i,n,o,r,s){return a.MMR_LOG("Shimming video element: "+n.outerHTML),new c(e,t,i,n,o,r,s),n}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.VideoElementRedirect=void 0;var n,o=i(19),r=i(6),a=i(1),c=i(3),s=i(0);!function(e){e[e.Rendering=0]="Rendering",e[e.NotRendering=1]="NotRendering",e[e.Paused=2]="Paused"}(n||(n={}));var d=function(e,t,i,n,o){this.creationTime=e,this.corruptedVideoFrames=t,this.droppedVideoFrames=i,this.totalFrameDelay=n,this.totalVideoFrames=o},l=function(){function e(e,t,i,r,a){this.remoteObjectManager=e,this.originalElement=t,this.occlusionSupportVersion=i,this.videoStatusOverlayEnabled=r,this.videoOutlinesEnabled=a,this.localObjectId=0,this.creationTime=0,this.mutationObserver=null,this.intersectionObserver=null,this.tabVisible=!1,this.ignoreTimeUpdates=!1,this.elementRectUpdateInterval=null,this.disconnectedMessageElement=null,this.redirectedMessageElement=null,this.lastValidVideoRect=new DOMRect(0,0,0,0),this.parentElementClipRects=new Array,this.hasPositionedAncestor=!1,this.elementVisible=!0,this.switchToLocal=!1,this.isWebRTCMode=!1,this.checkLocalPlaySuppressed=!0,this.remoteObjectActive=!1,this.patternElement=null,this.patternDefElement=null,this.patternScaleFactor=0,this.previousTotalVideoFrames=-1,this.lastVideoTimestamp=0,this.redirectionPlaying=n.NotRendering,this.displayedRedirectionMessage=!1;var c=navigator.userAgent;this.remoteObjectManager.createObject(this,"VideoElement",{occlusionSupportVersion:i,userAgent:c}),this.creationTime=performance.now(),s.MMR_LOG("VideoElementRedirect["+this.localObjectId+"]::VideoElementRedirect - overlay: "+this.videoStatusOverlayEnabled+", outlines: "+this.videoOutlinesEnabled),this.genericOcclusionSupported()&&(this.patternElement=document.createElementNS("http://www.w3.org/2000/svg","svg"),this.patternElement.style.position="absolute",this.videoOutlinesEnabled&&(this.patternElement.style.border="10px solid red",this.patternElement.style.boxSizing="border-box"));var d=this,l=t;this.mutationObserver=new MutationObserver((function(e,t){for(var i=0,n=e;i<n.length;i++){var o=n[i];d.onContentAttributeUpdated(o.attributeName,l.hasAttribute(o.attributeName)?l.getAttribute(o.attributeName):void 0)}})),this.mutationObserver.observe(l,{attributes:!0});var u=this;this.callSendElementRect=function(e){u.sendElementRect(u)},this.intersectionObserver=new IntersectionObserver(this.callSendElementRect,{root:null,rootMargin:"0px",threshold:0}),this.intersectionObserver.observe(this.originalElement),this.tabVisible=!document.hidden,this.sendElementRect(this),this.scheduleElementRectUpdate(),this.genericOcclusionSupported()||(this.occlusionTracker=o.createOcclusionTrackerForSite(document.URL,this),this.occlusionTracker.startMonitoring()),document.addEventListener("scroll",this.callSendElementRect),window.addEventListener("resize",this.callSendElementRect)}return e.prototype.genericOcclusionSupported=function(){return 1==this.occlusionSupportVersion},e.prototype.onContentAttributeUpdated=function(e,t){s.MMR_LOG("VideoElementRedirect["+this.localObjectId+"]::onContentAttributeUpdated - name: "+e+", value: "+t)},e.prototype.setIdlAttribute=function(t,i){s.MMR_LOG("VideoElementRedirect["+this.localObjectId+"]::setIdlAttribute[BEGIN] - name: "+t+", value: "+i);var n=i;if("src"==t&&(a.getShimObject(this.originalElement).currentTime=0,this.ignoreTimeUpdates=!0,s.MMR_LOG("VideoElementShim::ignoreTimeUpdates = true"),null!=i&&(n=new URL(n,document.URL).toString()),this.isWebRTCMode=!1),"currentTime"==t&&i<0&&(n="0.0"),"preload"==t&&"none"!=i&&this.onLoad(),e.boolRedirectAttributes.includes(t)&&(n=!1===i||void 0===i?"false":"true"),"srcObject"==t)return this.setNewMediaStream(i),void(this.isWebRTCMode=!0);var o=this;this.remoteObjectManager.invokeMethod(this.localObjectId,"setAttribute",{name:t,value:n},(function(e,n){s.MMR_LOG("VideoElementRedirect["+o.localObjectId+"]::setIdlAttribute[END] - result: 0x"+e.toString(16)),"src"==t&&(a.getShimObject(o.originalElement).currentSrc=i,o.ignoreTimeUpdates=!1,s.MMR_LOG("VideoElementRedirect["+o.localObjectId+"]::ignoreTimeUpdates = false"))}))},e.prototype.onOcclusionUpdate=function(){s.MMR_LOG("VideoElementRedirect["+this.localObjectId+"]::onOcclusionUpdate"),this.tabVisible=!document.hidden,this.sendElementRect(this)},e.prototype.scheduleElementRectUpdate=function(){if(this.elementRectUpdateInterval)s.MMR_LOG("VideoElementRedirect["+this.localObjectId+"]::scheduleElementRectUpdate - timer already scheduled");else{s.MMR_LOG("VideoElementRedirect["+this.localObjectId+"]::scheduleElementRectUpdate - scheduling timer");var e=this;this.elementRectUpdateInterval=setInterval((function(){e.tabVisible=!document.hidden,e.updateParentBoundingRects(),e.sendElementRect(e)}),1e3)}},e.prototype.cancelElementRectUpdate=function(){this.elementRectUpdateInterval?(s.MMR_LOG("VideoElementRedirect["+this.localObjectId+"]::cancelElementRectUpdate - clearing existing timer"),clearInterval(this.elementRectUpdateInterval),this.elementRectUpdateInterval=null):s.MMR_LOG("VideoElementRedirect["+this.localObjectId+"]::cancelElementRectUpdate - timer already cleared")},e.prototype.setLocalObjectId=function(e){this.localObjectId=e},e.prototype.getLocalObjectId=function(){return this.localObjectId},e.prototype.onRemoteObjectCreated=function(){this.remoteObjectActive=!0},e.prototype.invokeEvent=function(e){s.MMR_LOG("VideoElementRedirect["+this.localObjectId+"]::invokeEvent - type: "+e.type),"loadstart"==e.type&&(this.displayedRedirectionMessage=!1,this.resetRedirectedMessageElement()),a.getShimObject(this.originalElement).dispatchEvent(e)},e.prototype.invokeEventListener=function(e,t){},e.prototype.onAttributeUpdate=function(e,t){s.MMR_LOG("VideoElementRedirect["+this.localObjectId+"]::onAttributeUpdate - name: "+e+", value: "+a.tryJsonStringify(t));var i=a.getShimObject(this.originalElement),n=t;if(this.ignoreTimeUpdates&&"currentTime"==e)s.MMR_LOG("VideoElementRedirect["+this.localObjectId+"]::onAttributeUpdate - ignoring currentTime update");else{if("duration"==e&&null==t&&(n=1/0),"buffered"!=e&&"seekable"!=e||(n=a.createTimeRanges(t)),"videoPlaybackQuality"==e){var o=t.framesCorrupted?t.framesCorrupted:0,r=t.framesDropped?t.framesDropped:0,c=t.totalFrameDelay?t.totalFrameDelay:0,l=t.framesRendered?t.framesRendered:0,u=performance.now()-this.creationTime;n=new d(u,o,r,c,l),this.updatePlaybackStatus(l,u,i)}i.setAttributeOnShim(e,n)}},e.prototype.onConnectionEvent=function(e){s.MMR_LOG("VideoElementRedirect["+this.localObjectId+"]::onConnectionEvent - eventType: "+e),"clientConnected"==e?(this.occlusionTracker&&this.occlusionTracker.startMonitoring(),this.scheduleElementRectUpdate()):"clientDisconnected"==e?(this.occlusionTracker&&this.occlusionTracker.stopMonitoring(),this.remoteObjectActive=!1,this.cancelElementRectUpdate(),null==this.disconnectedMessageElement&&this.addDisconnectedMessageElement()):"switchToRemote"==e&&a.getShimObject(this.originalElement).switchToRemote()},e.prototype.updatePlaybackStatus=function(e,t,i){this.previousTotalVideoFrames==e?this.redirectionPlaying==n.Rendering&&t-this.lastVideoTimestamp>500&&(s.MMR_LOG("VideoElementRedirect["+this.localObjectId+"]::onAttributeUpdate - frames no longer rendering, "+i.paused),this.remoteObjectManager.invokeMethod(this.localObjectId,"showPause",{type:"video"},(function(e,t){s.MMR_LOG("VideoElementRedirect["+this.localObjectId+"]::showPause")})),this.redirectionPlaying=n.NotRendering):(this.redirectionPlaying==n.NotRendering&&(s.MMR_LOG("VideoElementRedirect["+this.localObjectId+"]::onAttributeUpdate - frames rendering"),this.remoteObjectManager.invokeMethod(this.localObjectId,"showPlay",{type:"video"},(function(e,t){s.MMR_LOG("VideoElementRedirect["+this.localObjectId+"]::showPlay")})),this.redirectionPlaying=n.Rendering,this.videoStatusOverlayEnabled&&this.addRedirectedMessageElement()),this.previousTotalVideoFrames=e,this.lastVideoTimestamp=t)},e.prototype.addDisconnectedMessageElement=function(){if(null==this.disconnectedMessageElement){this.updatePatternElement(new DOMRect),this.disconnectedMessageElement=document.createElement("div");var e=c.LocalizedStringHandler.getLocalizedStrings().disconnectedMessage;this.disconnectedMessageElement.innerHTML="<h1>"+e+"</h1>",this.updateDisconnectedMessageRect(),this.disconnectedMessageElement.style.backgroundColor="black",this.disconnectedMessageElement.style.opacity="0.9",this.disconnectedMessageElement.style.color="white",this.disconnectedMessageElement.style.position="absolute",this.disconnectedMessageElement.style.textAlign="center",document.body.appendChild(this.disconnectedMessageElement)}},e.prototype.resetRedirectedMessageElement=function(){if(null!=this.redirectedMessageElement){var t=document.getElementById(e.redirectionMessageElementId);null!=t&&t.remove()}else this.redirectedMessageElement=document.createElement("div"),this.redirectedMessageElement.setAttribute("id",e.redirectionMessageElementId)},e.prototype.addRedirectionFailedMessageElement=function(){if(this.videoStatusOverlayEnabled){s.MMR_LOG("VideoElementRedirect["+this.localObjectId+"]::addRedirectionFailedMessageElement"),this.displayedRedirectionMessage&&(this.displayedRedirectionMessage=!1),this.resetRedirectedMessageElement();var e=c.LocalizedStringHandler.getLocalizedStrings().redirectionFailedMessage;this.redirectedMessageElement.innerHTML=e,this.updateRedirectedMessageRect(),document.body.appendChild(this.redirectedMessageElement)}},e.prototype.addRedirectedMessageElement=function(){if(this.videoStatusOverlayEnabled&&!this.displayedRedirectionMessage){s.MMR_LOG("VideoElementRedirect["+this.localObjectId+"]::addRedirectedMessageElement"),this.resetRedirectedMessageElement();var t=c.LocalizedStringHandler.getLocalizedStrings().redirectedMessage;this.redirectedMessageElement.innerHTML=t,this.updateRedirectedMessageRect(),document.body.appendChild(this.redirectedMessageElement),this.displayedRedirectionMessage=!0,setTimeout((function(){document.getElementById(e.redirectionMessageElementId).remove()}),5e3)}},e.prototype.updateDisconnectedMessageRect=function(){if(null!=this.disconnectedMessageElement){var e=this.originalElement.getBoundingClientRect();0!=e.width&&0!=e.height||(e=this.lastValidVideoRect),0!=e.width&&0!=e.height||(e.width=.4*document.body.clientWidth,e.height=.2*document.body.clientHeight,e.x=.3*document.body.clientWidth,e.y=0),this.disconnectedMessageElement.style.left=e.x.toString()+"px",this.disconnectedMessageElement.style.top=e.y.toString()+"px",this.disconnectedMessageElement.style.width=e.width.toString()+"px",this.disconnectedMessageElement.style.height=(e.height/2).toString()+"px",this.disconnectedMessageElement.style.paddingTop=(e.height/2).toString()+"px"}},e.prototype.updateRedirectedMessageRect=function(){var e=this.originalElement.getBoundingClientRect();0!=e.width&&0!=e.height||(e=this.lastValidVideoRect),0!=e.width&&0!=e.height||(e.width=.4*document.body.clientWidth,e.height=.2*document.body.clientHeight,e.x=.3*document.body.clientWidth,e.y=0),this.redirectedMessageElement.style.left=e.x.toString()+"px",this.redirectedMessageElement.style.top=e.y.toString()+"px",this.redirectedMessageElement.style.width=e.width.toString()+"px",this.redirectedMessageElement.style.height=(e.height/18).toString()+"px",this.redirectedMessageElement.style.backgroundColor="black",this.redirectedMessageElement.style.opacity="1.0",this.redirectedMessageElement.style.color="white",this.redirectedMessageElement.style.fontFamily="Segoe UI, Tahoma, sans-serif",this.redirectedMessageElement.style.fontSize="1vw",this.redirectedMessageElement.style.fontWeight="bold",this.redirectedMessageElement.style.position="absolute",this.redirectedMessageElement.style.display="flex",this.redirectedMessageElement.style.justifyContent="center",this.redirectedMessageElement.style.alignItems="center"},e.prototype.updateParentBoundingRects=function(){var e=0,t=this.originalElement.parentElement,i=this.originalElement.getBoundingClientRect(),n=new Array;for(this.elementVisible=!0;null!=t&&e<5;){var o=window.getComputedStyle(t),r=o["overflow-x"]?o["overflow-x"]:o.overflow,a=o["overflow-y"]?o["overflow-y"]:o.overflow,c=t.getBoundingClientRect();if(null!=o.position&&""!=o.position&&"static"!=o.position&&(this.hasPositionedAncestor=!0),"HTML"==t.tagName)break;if(null!=o.opacity)break;if(r&&"visible"!=r){if(i.right<=c.left||i.left>=c.right){s.MMR_LOG("VideoElement["+this.localObjectId+"]::updateParentBoundingRects - Element is completely occluded. rect: "+JSON.stringify(i)+", parentRect: "+JSON.stringify(i)),this.elementVisible=!1;break}c.left-i.left>1&&(s.MMR_LOG("VideoElement["+this.localObjectId+"]::updateParentBoundingRects - rect.left="+i.left+" < parentRect.left="+c.left+" overflow="+r),n.push(new DOMRect(i.left,i.top,c.left-i.left,i.height))),i.right-c.right>1&&(s.MMR_LOG("VideoElement["+this.localObjectId+"]::updateParentBoundingRects - rect.right="+i.right+" > parentRect.right="+c.left+" overflow="+r),n.push(new DOMRect(c.right,i.top,i.right-c.right,i.height)))}if(a&&"visible"!=a){if(i.bottom<=c.top||i.top>=c.bottom){s.MMR_LOG("VideoElement["+this.localObjectId+"]::updateParentBoundingRects - Element is completely occluded. rect: "+JSON.stringify(i)+", parentRect: "+JSON.stringify(i)),this.elementVisible=!1;break}c.top-i.top>1&&(s.MMR_LOG("VideoElement["+this.localObjectId+"]::updateParentBoundingRects - rect.top="+i.top+" < parentRect.top="+c.top+" overflow="+a),n.push(new DOMRect(i.left,i.top,i.width,c.top-i.top))),i.bottom-c.bottom>1&&(s.MMR_LOG("VideoElement["+this.localObjectId+"]::updateParentBoundingRects - rect.bottom="+i.bottom+" > parentRect.bottom="+c.bottom+" overflow="+a),n.push(new DOMRect(i.left,c.bottom,i.width,i.bottom-c.bottom)))}t=t.parentElement,e++}this.parentElementClipRects=n},e.prototype.updatePatternElement=function(e){if(this.genericOcclusionSupported()){if(this.switchToLocal||!this.remoteObjectActive)return this.patternElement.style.visibility="hidden",void this.setOpacityOnOriginalElement("1");var t=Math.round(e.width),i=Math.round(e.height),n=t+t%2,o=i+i%2,r=new DOMRect(e.x,e.y,n,o),a=window.devicePixelRatio;if(!this.patternDefElement||r.width!=this.lastValidVideoRect.width||r.height!=this.lastValidVideoRect.height||a!=this.patternScaleFactor){var c=1/a;if(!this.patternDefElement||a!=this.patternScaleFactor){var s=null;if(this.patternDefElement)for((s=this.patternDefElement.parentElement).removeChild(this.patternDefElement),this.patternDefElement=null;this.patternElement.firstChild;)this.patternElement.removeChild(this.patternElement.firstChild);else s=document.createElementNS("http://www.w3.org/2000/svg","defs");this.patternDefElement=document.createElementNS("http://www.w3.org/2000/svg","pattern"),this.patternDefElement.setAttribute("id","Checkerboard"+this.localObjectId);for(var d=c.toString(),l=[{x:"0",y:"0",fill:"#ff00ff"},{x:d,y:"0",fill:"#00ff00"},{x:"0",y:d,fill:"#00ff00"},{x:d,y:d,fill:"#ff00ff"}],u=0;u<l.length;u++){var h=l[u],p=document.createElementNS("http://www.w3.org/2000/svg","rect");p.setAttribute("x",h.x),p.setAttribute("y",h.y),p.setAttribute("fill",h.fill),p.setAttribute("width",d),p.setAttribute("height",d),this.patternDefElement.appendChild(p)}s.appendChild(this.patternDefElement),this.patternElement.appendChild(s);var m=document.createElementNS("http://www.w3.org/2000/svg","rect");m.setAttribute("id","overallPatternRect"),m.setAttribute("fill","url(#Checkerboard"+this.localObjectId+")"),this.patternElement.appendChild(m)}var f=2*c/r.width,M=2*c/r.height;this.patternDefElement.setAttribute("width",f.toString()),this.patternDefElement.setAttribute("height",M.toString());var b=this.patternElement.getElementById("overallPatternRect");b.setAttribute("width",r.width.toString()),b.setAttribute("height",r.height.toString()),this.patternScaleFactor=a}var g=this.originalElement.parentElement,O=null!=g?g.getBoundingClientRect():new DOMRect(0,0,0,0);if(this.patternElement.style.width=r.width+"px",this.patternElement.style.height=r.height+"px",this.hasPositionedAncestor?(this.patternElement.style.top=r.top-O.top+"px",this.patternElement.style.bottom=r.bottom-O.top+"px",this.patternElement.style.left=r.left-O.left+"px",this.patternElement.style.right=r.right-O.right+"px"):(this.patternElement.style.top=r.top+"px",this.patternElement.style.bottom=r.bottom+"px",this.patternElement.style.left=r.left+"px",this.patternElement.style.right=r.right+"px"),this.patternElement.style.visibility="visible",this.patternElement.parentElement!=g){null!=this.patternElement.parentElement&&this.patternElement.parentElement.removeChild(this.patternElement);var v=this.originalElement.nextSibling;g.insertBefore(this.patternElement,v)}this.setOpacityOnOriginalElement("0")}},e.prototype.sendElementRect=function(e){var t=r.rootWindowInfoTracker.getRootWindowInfo(),i=t.rootOffset,n=e.originalElement.getBoundingClientRect();0!=n.width&&0!=n.height?(this.updatePatternElement(n),this.lastValidVideoRect=n):e.patternElement&&(e.patternElement.style.visibility="hidden"),this.updateDisconnectedMessageRect();var o=window.devicePixelRatio,a=new Object;a.left=Math.round((n.left+i.x)*o),a.right=Math.round((n.right+i.x)*o),a.top=Math.round((n.top+i.y)*o),a.bottom=Math.round((n.bottom+i.y)*o),e.tabVisible&&e.elementVisible&&!e.switchToLocal||(a.left=0,a.right=0,a.top=0,a.bottom=0);var c=t.title,d=window.devicePixelRatio;s.MMR_LOG("VideoElementRedirect["+this.localObjectId+"]::setRect[BEGIN] - scaledRect: "+JSON.stringify(a)+", windowTitle: "+c+", displayScaleFactor: "+d+", elementVisible: "+e.elementVisible),e.remoteObjectManager.invokeMethod(e.localObjectId,"setRect",{rect:a,windowTitle:c,displayScaleFactor:d,checkForDuplicateTitles:!0},(function(e,t){s.MMR_LOG("VideoElementRedirect["+this.localObjectId+"]::setRect[END] - result: 0x"+e.toString(16)+", hasDuplicateWindows: "+t.hasDuplicateWindows),1==t.hasDuplicateWindows&&r.rootWindowInfoTracker.setTitleModificationEnabled(!0)}));var l=new Array;if(e.occlusionTracker){var u=new DOMRect(n.left+i.x,n.top+i.y,n.width,n.height);l=e.occlusionTracker.getClipRects(u)}if(window!=window.parent){if(n.left<0){var h=(0-n.left)*o,p=new DOMRect(a.left,a.top,h,a.bottom-a.top);l.push(p)}if(n.top<0){var m=(0-n.top)*o,f=new DOMRect(a.left,a.top,a.right-a.left,m);l.push(f)}}var M=[].concat(l,this.parentElementClipRects);s.MMR_LOG("VideoElementRedirect["+e.localObjectId+"]::setClipRects[BEGIN] - clipRects: "+JSON.stringify(M)),e.remoteObjectManager.invokeMethod(e.localObjectId,"setClipRects",{rects:M},(function(t,i){s.MMR_LOG("VideoElementRedirect["+e.localObjectId+"]::setClipRects[END] - result: 0x"+t.toString(16))}))},e.prototype.onLoad=function(){var e=a.getShimObject(this.originalElement);e.networkState!=e.NETWORK_EMPTY||null!=e.src&&""!=e.src||0!=e.sourceNodes.length||(s.MMR_LOG("VideoElementRedirect["+this.localObjectId+"]::onLoad - no source so setting networkState to NETWORK_NO_SOURCE"),e.networkState=e.NETWORK_NO_SOURCE)},e.prototype.setNewMediaStream=function(e){var t,i,n,o;if(e!=this.mediaStream&&(this.mediaStream&&(this.mediaStream.removeEventListener("addtrack",this.addTrackRef),this.mediaStream.removeEventListener("removetrack",this.removeTrackRef)),this.mediaStream=e,this.mediaStream)){var r=this;this.mediaStream.addEventListener("addtrack",this.addTrackRef=function(e){r.mediaStreamTrackUpdate(e)}),this.mediaStream.addEventListener("removetrack",this.removeTrackRef=function(e){r.mediaStreamTrackUpdate(e)});var a=void 0;(null===(t=this.mediaStream)||void 0===t?void 0:t.getAudioTracks().length)>0&&(a=null===(i=this.mediaStream)||void 0===i?void 0:i.getAudioTracks()[0]),this.setAudioTrack(a);var c=void 0;(null===(n=this.mediaStream)||void 0===n?void 0:n.getVideoTracks().length)>0&&(c=null===(o=this.mediaStream)||void 0===o?void 0:o.getVideoTracks()[0]),this.setVideoTrack(c)}},e.prototype.setAudioTrack=function(e){if(e!=this.audioTrack){this.audioTrack=e;var t="",i=!1;if(this.audioTrack)t=this.audioTrack.id,i=a.getShimObject(this.audioTrack).isCaptureTrack;var n=this;s.MMR_LOG("VideoElementRedirect["+n.localObjectId+"]::setAudioTrack[BEGIN] - track: "+t),this.remoteObjectManager.invokeMethod(this.localObjectId,"setAudioTrack",{track:t,isCapture:i},(function(e,t){s.MMR_LOG("VideoElementRedirect["+n.localObjectId+"]::setAudioTrack[END] - result: 0x"+e.toString(16))}))}},e.prototype.setVideoTrack=function(e){if(e!=this.videoTrack){this.videoTrack=e;var t="",i=!1;if(this.videoTrack)t=this.videoTrack.id,i=a.getShimObject(this.videoTrack).isCaptureTrack;var n=this;s.MMR_LOG("VideoElementRedirect["+n.localObjectId+"]::setVideoTrack[BEGIN] - track: "+t+" isCapture: "+i),this.remoteObjectManager.invokeMethod(this.localObjectId,"setVideoTrack",{track:t,isCapture:i},(function(e,t){s.MMR_LOG("VideoElementRedirect["+n.localObjectId+"]::setVideoTrack[END] - result: 0x"+e.toString(16))}))}},e.prototype.mediaStreamTrackUpdate=function(e){var t,i,n,o,r=e.track.kind;if(s.MMR_LOG("VideoElementRedirect[]::mediaStreamTrackUpdate - kind: "+r),"audio"==r){var a=void 0;this.mediaStream&&(null===(t=this.mediaStream)||void 0===t?void 0:t.getAudioTracks().length)>0&&(a=null===(i=this.mediaStream)||void 0===i?void 0:i.getAudioTracks()[0]),this.setAudioTrack(a)}else if("video"==r){a=void 0;this.mediaStream&&(null===(n=this.mediaStream)||void 0===n?void 0:n.getVideoTracks().length)>0&&(a=null===(o=this.mediaStream)||void 0===o?void 0:o.getVideoTracks()[0]),this.setVideoTrack(a)}},e.prototype.cancelRemote=function(e){var t=this.localObjectId;s.MMR_LOG("VideoElementRedirect["+t+"]::cancelRemote[BEGIN]"),this.switchToLocal=!0,this.sendElementRect(this),this.remoteObjectManager.invokeMethod(t,"fallback",{message:e},(function(e,i){console.log("VideoElementRedirect["+t+"]::cancelRemote[END] - result: 0x"+e.toString(16))})),this.mutationObserver.disconnect(),this.intersectionObserver.disconnect(),this.occlusionTracker&&this.occlusionTracker.stopMonitoring(),document.removeEventListener("scroll",this.callSendElementRect),window.removeEventListener("resize",this.callSendElementRect),this.cancelElementRectUpdate()},e.prototype.setOpacityOnOriginalElement=function(e){var t=a.getShimObject(this.originalElement);if(null!=t&&null!=t.get_style_original){var i=t.get_style_original.apply(this.originalElement);console.log("VideoElementRedirect["+this.localObjectId+"]::setOpacityOnOriginalElement - "+e),i.opacity=e}},e.prototype.getVideoPlaybackQuality=function(){return new d(this.creationTime,0,0,0,0)},e.prototype.pause=function(){var e=this,t=this.localObjectId;s.MMR_LOG("VideoElementRedirect["+t+"]::pause[BEGIN]"),this.remoteObjectManager.invokeMethod(t,"pause",{type:"video"},(function(i,o){e.redirectionPlaying=n.Paused,s.MMR_LOG("VideoElementRedirect["+t+"]::pause[END] - result: 0x"+i.toString(16))}))},e.prototype.play=function(){var e=this;return s.MMR_LOG("VideoElementRedirect["+e.localObjectId+"]::play[BEGIN]"),new Promise((function(t,i){var o=function(o,r){(e.redirectionPlaying=n.NotRendering,s.MMR_LOG("VideoElementRedirect["+e.localObjectId+"]::play[END] - result: 0x"+o.toString(16)),o>=0)?(a.getShimObject(e.originalElement).paused=!1,e.videoStatusOverlayEnabled&&setTimeout((function(){e.redirectionPlaying==n.NotRendering&&e.addRedirectionFailedMessageElement()}),5e3),t()):i()};if(e.checkLocalPlaySuppressed){var r=document.createElement_original("video");r.src="invalid.mp4",r.play().then((function(){s.MMR_LOG("VideoElementRedirect["+e.localObjectId+"]::play - UNEXPECTED: local test play succeeded"),e.remoteObjectManager.invokeMethod(e.localObjectId,"play",{type:"video"},o),e.checkLocalPlaySuppressed=!1}),(function(t){"NotAllowedError"==t.name?(s.MMR_LOG("VideoElementRedirect["+e.localObjectId+"]::play - local VideoElement returned NotAllowedError, suppressing play"),i(t)):(s.MMR_LOG("VideoElementRedirect["+e.localObjectId+"]::play - sending play invoke event err="+t.name),e.remoteObjectManager.invokeMethod(e.localObjectId,"play",{type:"video"},o),e.checkLocalPlaySuppressed=!1)}))}else e.remoteObjectManager.invokeMethod(e.localObjectId,"play",{type:"video"},o)}))},e.prototype.load=function(){this.onLoad();var e=this.localObjectId,t=a.getShimObject(this.originalElement).src;s.MMR_LOG("VideoElementRedirect["+e+"]::load[BEGIN] - src:"+t),this.remoteObjectManager.invokeMethod(e,"load",{src:t},(function(t,i){s.MMR_LOG("VideoElementRedirect["+e+"]::load[END] - result: 0x"+t.toString(16))}))},e.prototype.setSinkId=function(e){s.MMR_LOG("VideoElementRedirect["+this.localObjectId+"]::setSinkId[BEGIN] - sinkId: "+e);var t=this;return new Promise((function(i,n){t.remoteObjectManager.invokeMethod(t.localObjectId,"setSinkId",{sinkId:e},(function(e,t){s.MMR_LOG("VideoElementRedirect["+this.localObjectId+"]::setSinkId[END] - result: 0x"+e.toString(16)),e>=0?i():n()}))}))},e.redirectionMessageElementId="redirectMessage",e.boolRedirectAttributes=["autoplay","defaultMuted","loop","muted"],e.redirectAttributes=["autoplay","audioTracks","buffered","currentTime","defaultMuted","defaultPlaybackRate","disablePictureInPicture","duration","ended","error","loop","muted","networkState","playbackRate","paused","playsinline","poster","preload","readyState","seekable","seeking","src","srcObject","textTracks","tracks","videoPlaybackQuality","videoTracks","videoWidth","videoHeight","volume"],e}();t.VideoElementRedirect=l},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HardcodedOcclusionTracker=t.createOcclusionTrackerForSite=t.hardcodedOcclusionDefinitions=void 0;var n=i(0),o=i(6);t.hardcodedOcclusionDefinitions={".*youtube.com.*":[{occlusionActiveElementSelector:".ytp-gradient-bottom",clippingElementSelector:".ytp-chrome-bottom"},{occlusionActiveElementSelector:".ytp-ad-skip-button-container",clippingElementSelector:".ytp-ad-skip-button-container"},{occlusionActiveElementSelector:".ytp-contextmenu",clippingElementSelector:".ytp-contextmenu"},{occlusionActiveElementSelector:".ytp-settings-menu",clippingElementSelector:".ytp-settings-menu"},{occlusionActiveElementSelector:".ytp-popup.ytp-big-mode",clippingElementSelector:".ytp-popup.ytp-big-mode"},{occlusionActiveElementSelector:".ytd-masthead",clippingElementSelector:".ytd-masthead"},{occlusionActiveElementSelector:".ytp-caption-window-bottom",clippingElementSelector:".ytp-caption-window-bottom"},{occlusionActiveElementSelector:".ytp-miniplayer-close-button",clippingElementSelector:".ytp-miniplayer-close-button"},{occlusionActiveElementSelector:".ytp-miniplayer-expand-watch-page-button",clippingElementSelector:".ytp-miniplayer-expand-watch-page-button"},{occlusionActiveElementSelector:"#contentContainer.tp-yt-app-drawer",clippingElementSelector:"#contentContainer.tp-yt-app-drawer"}]},t.createOcclusionTrackerForSite=function(e,i){for(var o=0,a=Object.entries(t.hardcodedOcclusionDefinitions);o<a.length;o++){var c=a[o],s=c[0],d=c[1],l=new RegExp(s);if(e.match(l))return n.MMR_LOG("createOcclusionTrackerForSite - url: "+e+" matched pattern: "+s+", applying hard-coded occlusion tracking"),new r(i,d)}return n.MMR_LOG("createOcclusionTrackerForSite - url: "+e+", not applicable for occlusions"),new r(i,[])};var r=function(){function e(e,t){this.occludingItemDefinitions=new Array,this.activeOcclusionTrackers=new Map,this.monitoringInterval=null,this.client=e,this.occludingItemDefinitions=t}return e.prototype.startMonitoring=function(){if(n.MMR_LOG("HardcodedOcclusionTracker::startMonitoring"),this.monitoringInterval)n.MMR_LOG("HardcodedOcclusionTracker::startMonitoring - monitoring already active");else if(this.occludingItemDefinitions.length>0){n.MMR_LOG("HardcodedOcclusionTracker::startMonitoring - starting monitoring");var e=this;this.monitoringInterval=setInterval((function(){e.tryActivatingNewOcclusionTrackers()}),1e3)}},e.prototype.stopMonitoring=function(){n.MMR_LOG("HardcodedOcclusionTracker::stopMonitoring"),this.monitoringInterval?(clearInterval(this.monitoringInterval),this.monitoringInterval=null):n.MMR_LOG("HardcodedOcclusionTracker::stopMonitoring - monitoring already stopped")},e.prototype.tryActivatingNewOcclusionTrackers=function(){var e=this,t=this;this.occludingItemDefinitions.forEach((function(i){document.querySelectorAll(i.occlusionActiveElementSelector).forEach((function(o){var r=o;t.activeOcclusionTrackers.has(r)||(n.MMR_LOG("HardcodedOcclusionTracker::tryActivatePendingOccludingTrackers - creating occlusion tracker for new element - selector: "+i.occlusionActiveElementSelector),t.activeOcclusionTrackers.set(r,new a(e,i,r)))}))}))},e.prototype.onOcclusionUpdate=function(){n.MMR_LOG("HardcodedOcclusionTracker::onOcclusionUpdate"),this.client.onOcclusionUpdate()},e.prototype.getClipRects=function(e){var t=o.rootWindowInfoTracker.getRootWindowInfo().rootOffset,i=new Array;return this.activeOcclusionTrackers.forEach((function(o){if(o.isVisible){var r=o.getClipRect();if(r.width>0&&r.height>0&&r.bottom>0&&r.right>0){var a=new DOMRect(r.left+t.x,r.top+t.y,r.width,r.height);s=e,d=(c=a).left>=s.left&&c.left<=s.right||c.right>=s.left&&c.right<=s.right||s.left>=c.left&&s.left<=c.right||s.right>=c.left&&s.right<=c.right,l=c.top>=s.top&&c.top<=s.bottom||c.bottom>=s.top&&c.bottom<=s.bottom||s.top>=c.top&&s.top<=c.bottom||s.bottom>=c.top&&s.bottom<=c.bottom,d&&l?(n.MMR_LOG("HardcodedOcclusionTracker::getClipRects("+o.definition.occlusionActiveElementSelector+") - adding clip rect: "+JSON.stringify(a)),i.push(new DOMRect(a.left,a.top,a.width,a.height))):n.MMR_LOG("HardcodedOcclusionTracker::getClipRects("+o.definition.occlusionActiveElementSelector+") - Rejecting non-intersecting clip rect:"+JSON.stringify(a)+" - video rect: "+JSON.stringify(e))}else n.MMR_LOG("HardcodedOcclusionTracker::getClipRects("+o.definition.occlusionActiveElementSelector+") - ignoring clip rect with 0 width/height/bottom/right: "+JSON.stringify(r))}var c,s,d,l})),i},e}();t.HardcodedOcclusionTracker=r;var a=function(){function e(e,t,i){this.target=i,this.client=e,this.definition=t,this.isVisible=!1;var o=this;this.intersectionObserver=new IntersectionObserver((function(e,t){e.forEach((function(e){n.MMR_LOG("OcclusionTracker("+o.definition.occlusionActiveElementSelector+"): isIntersecting: "+e.isIntersecting+", rect: "+JSON.stringify(e.boundingClientRect)),o.updateVisibilityState(e.isIntersecting)}))}),{root:null,rootMargin:"0px",threshold:0}),this.intersectionObserver.observe(this.target)}return e.prototype.getClipRect=function(){var e=this.target;return this.definition.occlusionActiveElementSelector!=this.definition.clippingElementSelector&&(e=document.querySelector(this.definition.clippingElementSelector)),null==e?(n.MMR_ERR("OcclusionTracker::getClipRect - missing clipping element for selector: "+this.definition.clippingElementSelector),new DOMRect(0,0,0,0)):e.getBoundingClientRect()},e.prototype.updateVisibilityState=function(e){this.isVisible=e,this.client.onOcclusionUpdate()},e}()},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setupMediaSourceShims=t.MediaSourceShim=void 0;var n,o=i(21),r=i(1),a=i(4),c=i(10),s=i(1),d=i(0),l=null,u=null,h=MediaSource,p=URL.createObjectURL;!function(e){e[e.unknown=0]="unknown",e[e.support=1]="support",e[e.unsupport=2]="unsupport"}(n||(n={}));var m=function(){function e(){var t=this;this.duration=NaN,this.readyState="closed",this.isMSRDCObject=!0,this.originalMediaSource=null,this.mimeTypeMap=new Map,this.playbackPathMode=r.ShimCommon.initialPlaybackPathMode,d.MMR_LOG("MediaSourceShim::MediaSourceShim"),this.originalMediaSource=new h,this.blobURL=p(this.originalMediaSource),this.mediaSourceRedirect=new o.MediaSourceRedirect(l,this,this.blobURL),u.addFallbackMediaSource(this,this.blobURL),this.postSourceOpenFallbackQueue=new Array,this.sourceBufferShims=new Array;var i=this;e.shimmedProperties.forEach((function(e){i.mediaSourceRedirect[e]=i.originalMediaSource[e],Object.defineProperty(i,e,{get:function(){var t;return t=i.playbackPathMode==r.PlaybackPathMode.LOCAL?i.originalMediaSource[e]:i.mediaSourceRedirect[e],d.MMR_LOG("MediaSourceShim["+i.fallbackObjectId+"]::get - "+e+"="+t),t},set:function(t){d.MMR_LOG("MediaSourceShim["+i.fallbackObjectId+"]::set - "+e+"="+t);var n=function(){i.originalMediaSource[e]=t},o=function(){i.mediaSourceRedirect.setAttribute(e,t)};switch(i.playbackPathMode){case r.PlaybackPathMode.REMOTE:o();break;case r.PlaybackPathMode.UNKNOWN:i.postSourceOpenFallbackQueue.push(n),o();break;case r.PlaybackPathMode.LOCAL:n()}return!0}})})),e.eventHandlers.forEach((function(e){var i="_on"+e+"eventHandler";Object.defineProperty(t,"on"+e,{get:function(){return this[i]||null},set:function(t){this[i]&&(this.removeEventListener(e,this[i],null),delete this[i]),t&&(this[i]=t,this.addEventListener(e,this[i],null))}})}))}return e.prototype.localOrRemoteExecute=function(t,i){var n=this,o=void 0,c=function(){return n.originalMediaSource[t].apply(n.originalMediaSource,i)};switch(this.playbackPathMode){case r.PlaybackPathMode.REMOTE:o=this.mediaSourceRedirect[t].apply(this.mediaSourceRedirect,i);break;case r.PlaybackPathMode.UNKNOWN:o=this.mediaSourceRedirect[t].apply(this.mediaSourceRedirect,i),e.postFallbackQueueMethods.includes(t)?u.queueFallbackFunction(this.fallbackObjectId,c,a.QueueType.POSTFALLBACK):u.queueFallbackFunction(this.fallbackObjectId,c);break;case r.PlaybackPathMode.LOCAL:o=c()}return d.MMR_LOG("MediaSourceShim["+this.fallbackObjectId+"]::localOrRemoteExecute - functionName="+t+" args="+i+" return="+o),o},e.prototype.localOrRemoteExecuteFunctions=function(e,t,i){switch(void 0===i&&(i=a.QueueType.FALLBACK),this.playbackPathMode){case r.PlaybackPathMode.REMOTE:return t();case r.PlaybackPathMode.UNKNOWN:return u.queueFallbackFunction(this.fallbackObjectId,e,i),t();case r.PlaybackPathMode.LOCAL:return e()}},e.prototype.setFallbackObjectId=function(e){this.fallbackObjectId=e},e.prototype.switchToLocal=function(){d.MMR_LOG("MediaSourceShim["+this.fallbackObjectId+"]::switchToLocal - playbackPathMode="+this.playbackPathMode),d.MMR_ASSERT(this.playbackPathMode==r.PlaybackPathMode.UNKNOWN),this.playbackPathMode=r.PlaybackPathMode.LOCAL;var e=this,t=function(){d.MMR_LOG("MediaSourceShim["+e.fallbackObjectId+"]::switchToLocal - executing postSourceOpenFallbackQueue"),e.postSourceOpenFallbackQueue.forEach((function(e){e()})),e.postSourceOpenFallbackQueue=void 0};if("open"==this.originalMediaSource.readyState)t();else{var i=function(){t(),e.originalMediaSource.removeEventListener("sourceopen",i)};this.originalMediaSource.addEventListener("sourceopen",i)}},e.prototype.switchToRemote=function(){d.MMR_LOG("MediaSourceShim["+this.fallbackObjectId+"]::switchToRemote"),d.MMR_ASSERT(this.playbackPathMode==r.PlaybackPathMode.UNKNOWN),this.postSourceOpenFallbackQueue=void 0,this.playbackPathMode=r.PlaybackPathMode.REMOTE,this.sourceBufferShims.forEach((function(e){e.switchToRemote()}))},e.prototype.addSourceBuffer=function(e){if(d.MMR_LOG("MediaSourceShim["+this.fallbackObjectId+"]::addSourceBuffer: "+e),r.ShimCommon.initialPlaybackPathMode==r.PlaybackPathMode.LOCAL)return c.setupPassthroughSourceBufferShim(this.originalMediaSource.addSourceBuffer(e));if(this.playbackPathMode==r.PlaybackPathMode.LOCAL)return this.originalMediaSource.addSourceBuffer(e);var t=this.mediaSourceRedirect.addSourceBuffer(e);if(t.setFallbackPathMode(this.playbackPathMode),this.sourceBufferShims.push(t),this.playbackPathMode==r.PlaybackPathMode.UNKNOWN){var i=this.originalMediaSource;this.postSourceOpenFallbackQueue.push((function(){var n=i.addSourceBuffer(e);t.switchToLocal(n)}))}return t},e.prototype.clearLiveSeekableRange=function(){d.MMR_LOG("MediaSourceShim["+this.fallbackObjectId+"]::clearLiveSeekableRange[BEGIN]"),this.localOrRemoteExecute("clearLiveSeekableRange",[])},e.prototype.endOfStream=function(e){d.MMR_LOG("MediaSourceShim["+this.fallbackObjectId+"]::endOfStream[BEGIN] - endOfStreamError: "+e),this.localOrRemoteExecute("endOfStream",[e])},e.prototype.removeSourceBuffer=function(e){d.MMR_LOG("MediaSourceShim["+this.fallbackObjectId+"]::removeSourceBuffer[BEGIN] - sourceBuffer: "+s.tryJsonStringify(e)),this.localOrRemoteExecute("removeSourceBuffer",[e])},e.prototype.setLiveSeekableRange=function(e,t){d.MMR_LOG("MediaSourceShim["+this.fallbackObjectId+"]::setLiveSeekableRange[BEGIN] - start: "+e+", end: "+t),this.localOrRemoteExecute("setLiveSeekableRange",[e,t])},e.prototype.addEventListener=function(e,t,i){if(d.MMR_LOG("MediaSourceShim["+this.fallbackObjectId+"]::addEventListener - type: "+e),r.ShimCommon.initialPlaybackPathMode==r.PlaybackPathMode.LOCAL){var n=this;this.originalMediaSource.addEventListener(e,(function(){d.MMR_LOG("MediaSourceShim["+n.fallbackObjectId+"]::addEventListener[LOCAL]::addEventListener - type: "+e+" fired!")}),i)}this.localOrRemoteExecute("addEventListener",[e,t,i])},e.prototype.removeEventListener=function(e,t,i){d.MMR_LOG("MediaSourceShim["+this.fallbackObjectId+"]::removeEventListener - type: "+e),this.localOrRemoteExecute("removeEventListener",[e,t,i])},e.prototype.dispatchEvent=function(e){return d.MMR_LOG("MediaSourceShim["+this.fallbackObjectId+"]::dispatchEvent - type: "+e.type),this.localOrRemoteExecute("dispatchEvent",[e])},Object.defineProperty(e.prototype,"sourceBuffers",{get:function(){return d.MMR_LOG("MediaSourceShim["+this.fallbackObjectId+"]::get sourceBuffers"),this.playbackPathMode==r.PlaybackPathMode.LOCAL?this.originalMediaSource.sourceBuffers:this.applyShimToSourceBufferList(this.mediaSourceRedirect.sourceBuffers,this.originalMediaSource.sourceBuffers)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"activeSourceBuffers",{get:function(){return d.MMR_LOG("MediaSourceShim["+this.fallbackObjectId+"]::get activeSourceBuffers"),this.playbackPathMode==r.PlaybackPathMode.LOCAL?this.originalMediaSource.activeSourceBuffers:this.applyShimToSourceBufferList(this.mediaSourceRedirect.activeSourceBuffers,this.originalMediaSource.activeSourceBuffers)},enumerable:!1,configurable:!0}),e.prototype.applyShimToSourceBufferList=function(e,t){var i=this,n=e.addEventListener;e.addEventListener=function(o,r,c){d.MMR_LOG("SourceBufferListShim::addEventListener - type: "+o);return i.localOrRemoteExecuteFunctions((function(){return t.addEventListener(o,r,c)}),(function(){return n.apply(e,[o,r,c])}),a.QueueType.POSTFALLBACK)};var o=e.removeEventListener;return e.removeEventListener=function(n,r,c){d.MMR_LOG("SourceBufferListShim::removeEventListener - type: "+n);return i.localOrRemoteExecuteFunctions((function(){return t.removeEventListener(n,r,c)}),(function(){return o.apply(e,[n,r,c])}),a.QueueType.POSTFALLBACK)},e},e.prototype.checkIsTypeSupported=function(e){if(-1!=e.indexOf("av01")||-1!=e.indexOf("av99")||-1!=e.indexOf("hev1")||-1!=e.indexOf("hevc")||-1!=e.indexOf("opus"))return d.MMR_WARN("MediaSourceShim::isTypeSupported - reporting unsupported for mimeType: "+e),!1;var t=h.isTypeSupported(e);if(this.mimeTypeMap.has(e))this.mimeTypeMap.get(e)==n.support?t=!0:this.mimeTypeMap.get(e)==n.unsupport?t=!1:d.MMR_LOG("MediaSourceShim::checkIsTypeSupported mimeType: "+e+" waiting for result");else{this.mimeTypeMap.set(e,n.unknown);var i=this;this.mediaSourceRedirect.isTypeSupported(e).then((function(t){var o=n.unknown;o=t?n.support:n.unsupport,i.mimeTypeMap.set(e,o)}))}return t||d.MMR_WARN("MediaSourceShim::checkIsTypeSupported - reporting unsupported for mimeType: "+e),t},e.eventHandlers=["sourceopen","sourceclose","sourceended"],e.shimmedProperties=o.MediaSourceRedirect.redirectAttributes,e.postFallbackQueueMethods=["addEventListener","remoteEventListener"],e}();t.MediaSourceShim=m,t.setupMediaSourceShims=function(e,t){l=e,u=t;var i=new m;window.MediaSource=m,window.MediaSource.isTypeSupported=function(e){var t=i.checkIsTypeSupported(e);return d.MMR_LOG("setupMediaSourceShims::checkIsTypeSupported mimeType: "+e+" "+t),t}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MediaSourceRedirect=void 0;var n=i(10),o=i(1),r=i(0),a=function(){function e(e,t,i){this.remoteObjectManager=e,this.parentShim=t,this.blobURL=i,this.duration=NaN,this.readyState="closed",this.localObjectId=0,r.MMR_LOG("MediaSourceRedirect::MediaSourceRedirect"),this.pendingSourceBufferShims=new Array,this.sourceBufferShims=new Array,this.remoteObjectManager.createObject(this,"MediaSource",{blobURL:this.blobURL}),this.sourceBuffers=new o.SourceBufferListProxy(this),this.activeSourceBuffers=new o.SourceBufferListProxy(this)}return e.prototype.setBlobURL=function(e){r.MMR_LOG("MediaSourceRedirect["+this.localObjectId+"]::setBlobURL[BEGIN] - blobURL: "+e),this.remoteObjectManager.invokeMethod(this.localObjectId,"setBlobURL",{blobURL:e},(function(e,t){r.MMR_LOG("MediaSourceRedirect::setBlobURL[END] - result: 0x"+e.toString(16))}))},e.prototype.setLocalObjectId=function(e){this.localObjectId=e,r.MMR_ASSERT(null!=this.pendingSourceBufferShims);var t=this;this.pendingSourceBufferShims.forEach((function(i,n,o){i.setMediaSourceOwner(e),t.sourceBufferShims.push(i)})),this.pendingSourceBufferShims=null},e.prototype.getLocalObjectId=function(){return this.localObjectId},e.prototype.onRemoteObjectCreated=function(){this.sourceBufferShims.forEach((function(e,t,i){e.setMediaSourceOwner(this.localObjectId)}))},e.prototype.invokeEvent=function(e){},e.prototype.invokeEventListener=function(e,t){if(r.MMR_LOG("MediaSourceRedirect["+this.localObjectId+"]::invokeEventListener - type: "+e.type),null!=t.handleEvent)t.handleEvent();else{var i=this.parentShim;Object.defineProperty(e,"target",{value:i}),Object.defineProperty(e,"currentTarget",{value:i}),t.apply(i,[e])}},e.prototype.onAttributeUpdate=function(t,i){r.MMR_LOG("MediaSourceRedirect["+this.localObjectId+"]::onAttributeUpdate - name: "+t+", value: "+o.tryJsonStringify(i)),"activeSourceBuffers"!=t?"sourceBuffers"!=t&&(e.redirectAttributes.includes(t)?this[t]="duration"==t&&null==i?1/0:i:this.parentShim[t]=i):this.onSourceBufferListUpdate(t,i)},e.prototype.onSourceBufferListUpdate=function(e,t){r.MMR_LOG("MediaSourceRedirect["+this.localObjectId+"]::onSourceBufferListUpdate - sourceBufferRemoteObjectIdArray: "+t);var i=new Array,n=this;null!=t&&null!=t.forEach&&t.forEach((function(e,t,o){var a=e.id;r.MMR_LOG("MediaSourceRedirect::onSourceBufferListUpdate - sourceBufferRemoteObjectIdArray["+t+"]: "+e+" value[id]="+a);var c=n.sourceBuffers.sourceBuffers.find((function(e){return e.sourceBufferRedirect.localObjectId==a}));null!=c&&i.push(c)})),"activeSourceBuffers"==e&&this.activeSourceBuffers.setSourceBuffers(i)},e.prototype.onConnectionEvent=function(e){},e.prototype.isTypeSupported=function(e){var t=this;r.MMR_LOG("MediaSourceRedirect["+this.localObjectId+"]::isTypeSupported: "+e);var i=this;return new Promise((function(n,o){t.remoteObjectManager.invokeMethod(t.localObjectId,"isTypeSupported",{mimeType:e},(function(t,a){r.MMR_LOG("MediaSourceRedirect["+i.localObjectId+"]::isTypeSupported[END] - result: 0x"+t.toString(16)+" mimeType: "+e+a.supported),t>=0?n(a.supported):o(t)}))}))},e.prototype.addSourceBuffer=function(e){r.MMR_LOG("MediaSourceRedirect["+this.localObjectId+"]::addSourceBuffer: "+e);var t=this.localObjectId,i=n.setupSourceBufferShim(this.remoteObjectManager,e,t);return null!=t?(this.sourceBufferShims.push(i),i.setMediaSourceOwner(t)):this.pendingSourceBufferShims.push(i),this.sourceBuffers.addSourceBuffer(i),i},e.prototype.clearLiveSeekableRange=function(){r.MMR_LOG("MediaSourceRedirect["+this.localObjectId+"]::clearLiveSeekableRange[BEGIN]"),this.remoteObjectManager.invokeMethod(this.localObjectId,"clearLiveSeekableRange",{},(function(e,t){r.MMR_LOG("MediaSourceRedirect::clearLiveSeekableRange[END] - result: 0x"+e.toString(16))}))},e.prototype.endOfStream=function(e){r.MMR_LOG("MediaSourceRedirect["+this.localObjectId+"]::endOfStream[BEGIN] - endOfStreamError: "+e),this.remoteObjectManager.invokeMethod(this.localObjectId,"endOfStream",{endOfStreamError:e},(function(e,t){r.MMR_LOG("MediaSourceRedirect::endOfStream[END] - result: 0x"+e.toString(16))}))},e.prototype.removeSourceBuffer=function(e){r.MMR_LOG("MediaSourceRedirect["+this.localObjectId+"]::removeSourceBuffer[BEGIN] - sourceBuffer: "+o.tryJsonStringify(e));var t=e.getLocalObjectId();r.MMR_ASSERT(t);var i=this.remoteObjectManager.localToRemoteIdMap.get(t);r.MMR_ASSERT(i),this.remoteObjectManager.invokeMethod(this.localObjectId,"removeSourceBuffer",{sourceBufferLocalObjectId:i},(function(e,t){r.MMR_LOG("MediaSourceRedirect::removeSourceBuffer[END] - result: 0x"+e.toString(16))})),this.sourceBuffers.removeSourceBuffer(e)},e.prototype.setLiveSeekableRange=function(e,t){r.MMR_LOG("MediaSourceRedirect["+this.localObjectId+"]::setLiveSeekableRange[BEGIN] - start: "+e+", end: "+t),this.remoteObjectManager.invokeMethod(this.localObjectId,"setLiveSeekableRange",{start:e,end:t},(function(e,t){r.MMR_LOG("MediaSourceRedirect::setLiveSeekableRange[END] - result: 0x"+e.toString(16))}))},e.prototype.setAttribute=function(e,t){r.MMR_LOG("MediaSourceRedirect["+this.localObjectId+"]::setAttribute[BEGIN] - name: "+e+", value: "+t),this[e]=t,this.remoteObjectManager.invokeMethod(this.localObjectId,"setAttribute",{name:e,value:t},(function(e,t){r.MMR_LOG("MediaSourceRedirect::setAttribute[END] - result: 0x"+e.toString(16))}))},e.prototype.addEventListener=function(e,t,i){r.MMR_LOG("MediaSourceRedirect["+this.localObjectId+"]::addEventListener - type: "+e),this.remoteObjectManager.addEventListener(this.localObjectId,e,t,i)},e.prototype.removeEventListener=function(e,t,i){r.MMR_LOG("MediaSourceRedirect["+this.localObjectId+"]::removeEventListener - type: "+e),this.remoteObjectManager.removeEventListener(this.localObjectId,e,t,i)},e.prototype.dispatchEvent=function(e){var t=null!=e.target?e.target.BufferListType:"";return r.MMR_LOG("MediaSourceRedirect["+this.localObjectId+"]::dispatchEvent - type: "+e.type+" bufferListType="+t),"sourceBuffers"==t?this.sourceBuffers.dispatchEvent(e):"activeSourceBuffers"==t?this.activeSourceBuffers.dispatchEvent(e):this.remoteObjectManager.dispatchEvent(this.localObjectId,e)},e.redirectAttributes=["duration","readyState"],e}();t.MediaSourceRedirect=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SourceBufferRedirect=void 0;var n=i(1),o=i(0),r=function(){function e(e,t,i,r){if(this.remoteObjectManager=e,this.parentShim=t,this.localObjectId=0,this.mediaSourceRemoteObjectId=-1,this.appendWindowEnd=Number.POSITIVE_INFINITY,this.appendWindowStart=0,this.buffered=n.createTimeRanges(new Array),this.timestampOffset=0,this.updating=!1,null!=r){var a=e.localToRemoteIdMap.get(r);o.MMR_ASSERT(null!=a),e.createObject(this,"SourceBuffer",{mimeType:i,mediaSourceRemoteObjectId:r,mediaSourceLocalObjectId:a})}else e.createObject(this,"SourceBuffer",{mimeType:i});o.MMR_LOG("SourceBufferRedirect["+this.localObjectId+"]::SourceBufferRedirect - mimeType: "+i)}return e.prototype.setLocalObjectId=function(e){this.localObjectId=e},e.prototype.getLocalObjectId=function(){return this.localObjectId},e.prototype.onRemoteObjectCreated=function(){},e.prototype.invokeEvent=function(e){},e.prototype.invokeEventListener=function(e,t){if(o.MMR_LOG("SourceBufferRedirect["+this.localObjectId+"]::invokeEventListener - type: "+e.type),null!=t.handleEvent)t.handleEvent();else{var i=this.parentShim[n.shimProxyPropertyName];Object.defineProperty(e,"target",{value:i}),Object.defineProperty(e,"currentTarget",{value:i}),t.apply(i,[e])}},e.prototype.onAttributeUpdate=function(e,t){o.MMR_LOG("SourceBufferRedirect["+this.localObjectId+"]::onAttributeUpdate - name: "+e+", value: "+n.tryJsonStringify(t)),"buffered"!=e&&"seekable"!=e||(t=n.createTimeRanges(t)),this[e]=t},e.prototype.onConnectionEvent=function(e){},e.prototype.setAttribute=function(e,t){if(o.MMR_LOG("SourceBufferRedirect["+this.localObjectId+"]::setAttribute[BEGIN] - name: "+e+", value: "+t),this[e]=t,"updating"!=e){var i=this.localObjectId;this.remoteObjectManager.invokeMethod(this.localObjectId,"setAttribute",{name:e,value:t},(function(e,t){o.MMR_LOG("SourceBufferRedirect["+i+"]::setAttribute[END] - result: 0x"+e.toString(16))}))}},e.prototype.setMediaSourceOwner=function(e){var t=this.localObjectId,i=this.remoteObjectManager.localToRemoteIdMap.get(e);o.MMR_LOG("SourceBufferRedirect["+t+"]:setMediaSourceOwner[BEGIN] - this.mediaSourceRemoteObjectId="+this.mediaSourceRemoteObjectId+", new mediaSourceRemoteObjectId="+i),o.MMR_ASSERT(null!=i),this.mediaSourceRemoteObjectId!=i&&this.remoteObjectManager.invokeMethod(t,"setMediaSourceOwner",{mediaSourceLocalObjectId:i,mediaSourceRemoteObjectId:e},(function(e,i){o.MMR_LOG("SourceBufferRedirect["+t+"]::setMediaSourceOwner[END] - result: 0x"+e.toString(16))})),this.mediaSourceRemoteObjectId=i},e.prototype.abort=function(){var e=this.localObjectId;o.MMR_LOG("SourceBufferRedirect["+e+"]::abort"),this.updating=!1,this.remoteObjectManager.invokeMethod(e,"abort",{},(function(t,i){o.MMR_LOG("SourceBufferRedirect["+e+"]::abort[END] - result: 0x"+t.toString(16))}))},e.prototype.appendBuffer=function(e){var t=this.localObjectId;o.MMR_LOG("SourceBufferRedirect["+t+"]::appendBuffer[BEGIN]:"),this.updating=!0,this.remoteObjectManager.invokeMethod(t,"appendBuffer",{dataB64Size:e.byteLength,dataB64:function(e){for(var t="",i=new Uint8Array(e),n=i.byteLength,o=0;o<n;o++)t+=String.fromCharCode(i[o]);return window.btoa(t)}(e)},(function(e,i){o.MMR_LOG("SourceBufferRedirect["+t+"]::appendBuffer[END] - result: 0x"+e.toString(16))}))},e.prototype.remove=function(e,t){var i=this.localObjectId;o.MMR_LOG("SourceBufferRedirect["+i+"]::remove - start: "+e+", end: "+t),this.updating=!0,this.remoteObjectManager.invokeMethod(i,"remove",{start:e,end:t},(function(e,t){o.MMR_LOG("SourceBufferRedirect["+i+"]::remove[END] - result: 0x"+e.toString(16))}))},e.prototype.changeType=function(e){o.MMR_LOG("SourceBufferRedirect["+this.localObjectId+"]::changeType - type: "+e),console.warn("SourceBufferRedirect::changeType: Unimplemented MSRDC shim method")},e.prototype.addEventListener=function(e,t,i){o.MMR_LOG("SourceBufferRedirect["+this.localObjectId+"]::addEventListener - type: "+e),this.remoteObjectManager.addEventListener(this.localObjectId,e,t,i)},e.prototype.removeEventListener=function(e,t,i){o.MMR_LOG("SourceBufferRedirect["+this.localObjectId+"]::removeEventListener - type: "+e),this.remoteObjectManager.removeEventListener(this.localObjectId,e,t,i)},e.prototype.dispatchEvent=function(e){return o.MMR_LOG("SourceBufferRedirect["+this.localObjectId+"]::dispatchEvent - type: "+e.type),this.remoteObjectManager.dispatchEvent(this.localObjectId,e)},e.sourceBufferRedirectAttributes=["appendWindowEnd","appendWindowStart","buffered","timestampOffset","updating"],e}();t.SourceBufferRedirect=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NativeMessagingPageProxy=void 0;var n=i(2),o=i(1),r=i(0),a=function(){function e(e){this.contentPortId=e,this.client=null,this.mmrEngaged=!1;var t=this;this.nativePortId=e,document.addEventListener(n.ProxyCommon.PROXY_RECEIVE_MESSAGE_EVENT,(function(e){t.onReceivedMessage(t.client,e.detail)})),r.MMR_LOG("NativeMessagingPageProxy::constructor")}return e.prototype.setClient=function(e){this.client=e},e.prototype.sendMessage=function(e){r.MMR_LOG("NativeMessagingPageProxy: Sending message: "+o.tryJsonStringify(e)),document.dispatchEvent(new CustomEvent(n.ProxyCommon.PROXY_SEND_MESSAGE_EVENT,{detail:e}))},e.prototype.onReceivedMessage=function(e,t){r.MMR_LOG("NativeMessagingPageProxy: Received remote message: "+o.tryJsonStringify(t)),r.MMR_ASSERT(null!=e),e.onReceivedMessage(t)},e.prototype.sendMMREngagedMessage=function(){this.mmrEngaged||(document.dispatchEvent(new CustomEvent(n.ProxyCommon.PROXY_SEND_MMR_ENGAGED,{})),this.mmrEngaged=!0)},e.prototype.sendSameOriginParentId=function(e){if(e!=this.nativePortId){r.MMR_LOG("NativeMessagingPageProxy: send message for Same Origin Parent, parentNativePortId="+e),this.nativePortId=e;var t={parentNativePortId:e};document.dispatchEvent(new CustomEvent(n.ProxyCommon.PROXY_SEND_SAME_ORIGIN_PARENT_ID,{detail:t}));var i=new Object;i.messageType=n.ProxyCommon.CONTENT_BG_SAME_ORIGIN_PARENT_MESSAGE_TYPE,r.MMR_ASSERT(null!=this.client),null!=this.client&&this.client.onReceivedMessage(i)}},e}();t.NativeMessagingPageProxy=a},function(e,t,i){"use strict";var n=this&&this.__spreadArrays||function(){for(var e=0,t=0,i=arguments.length;t<i;t++)e+=arguments[t].length;var n=Array(e),o=0;for(t=0;t<i;t++)for(var r=arguments[t],a=0,c=r.length;a<c;a++,o++)n[o]=r[a];return n};Object.defineProperty(t,"__esModule",{value:!0}),t.RemoteObjectManager=t.RemoteMessageTypes=void 0;var o,r=i(0),a=i(1),c=i(2);!function(e){e.CREATE_OBJECT="createObject",e.CREATE_OBJECT_RESPONSE="createObject",e.INVOKE_METHOD="invokeMethod",e.INVOKE_METHOD_RESPONSE="invokeMethodResponse",e.ON_EVENT="onEvent",e.ON_ATTRIBUTE_UPDATE="onAttributeUpdate",e.ON_CONNECTION_EVENT="onConnectionEvent"}(o=t.RemoteMessageTypes||(t.RemoteMessageTypes={}));var s=function(e,t){this.callback=e,this.messageObject=t},d=function(){function e(e,t){this.proxy=e,this.nextLocalObjectId=0,this.nextMethodCallId=0,this.isConnected=!0,this.webRtcSupportVersion=0,this.proxy=e,this.proxy.setClient(this),this.localObjectMap=new Map,this.localToRemoteIdMap=new Map,this.remoteToLocalObjectMap=new Map,this.queuedMethodCalls=new Map,this.pendingMethodCalls=new Map,this.eventListeners=new Map,this.webRtcSupportVersion=t,this.messageHistoryQueue=new Array,this.resendMessageQueue=new Array;var i=this;setTimeout((function(){r.MMR_LOG("RemoteObjectManager:: historyMessages 2 sec timeout, contentPortID: "+i.proxy.contentPortId),delete i.messageHistoryQueue}),2e3)}return e.prototype.checkForResendMessages=function(){var e=new Array,t=!1,i=this;this.resendMessageQueue.forEach((function(n,c,s){var d=n.messageType;r.MMR_ASSERT(null!=d);var l=n.remoteObjectId;if(r.MMR_ASSERT(null!=l),d==o.CREATE_OBJECT){if("SourceBuffer"==n.objectType&&delete n.args.mediaSourceLocalObjectId,i.proxy.sendMessage(n),r.MMR_LOG("MsRdcMmr::RemoteObjectManager::checkForResendMessages resend: "+a.tryJsonStringify(n)),i.localToRemoteIdMap.has(l)){var u=i.localToRemoteIdMap.get(l);i.localToRemoteIdMap.delete(l),i.remoteToLocalObjectMap.has(u)&&i.remoteToLocalObjectMap.delete(u)}}else if(d!=o.INVOKE_METHOD||t)e.push(n),r.MMR_LOG("MsRdcMmr::RemoteObjectManager::checkForResendMessages save: "+a.tryJsonStringify(n));else if(i.localToRemoteIdMap.has(l)){var h=!0;if("setMediaSourceOwner"==n.methodName){var p=n.args;if(null!=p.mediaSourceLocalObjectId&&null!=p.mediaSourceRemoteObjectId){var m=p.mediaSourceRemoteObjectId;i.localToRemoteIdMap.has(m)?(p.mediaSourceLocalObjectId=i.localToRemoteIdMap.get(m),n.args=p):(h=!1,t=!0,e.push(n),r.MMR_LOG("MsRdcMmr::RemoteObjectManager::checkForResendMessages save: "+a.tryJsonStringify(n)))}else h=!1,r.MMR_LOG("MsRdcMmr::RemoteObjectManager::checkForResendMessages drop: "+a.tryJsonStringify(n))}h&&(r.MMR_LOG("MsRdcMmr::RemoteObjectManager::checkForResendMessages resend: "+a.tryJsonStringify(n)),i.proxy.sendMessage(n))}else t=!0,e.push(n),r.MMR_LOG("MsRdcMmr::RemoteObjectManager::checkForResendMessages save: "+a.tryJsonStringify(n))})),this.resendMessageQueue=n(e),0!=this.resendMessageQueue.length&&r.MMR_LOG("MsRdcMmr::RemoteObjectManager::checkForResendMessages messages left: "+this.resendMessageQueue.length+" contentPortID: "+this.proxy.contentPortId)},e.prototype.onConnectionEvent=function(e){r.MMR_LOG("RemoteObjectManager::onConnectionEvent - eventType: "+e),"clientConnected"==e?this.isConnected=!0:"clientDisconnected"==e&&(this.isConnected=!1)},e.prototype.createObject=function(e,t,i){var n=new Object;n.messageType=o.CREATE_OBJECT,n.objectType=t,n.remoteObjectId=this.nextLocalObjectId,n.contentPortId=this.proxy.contentPortId,i.webrtcSupportVersion=this.webRtcSupportVersion,n.args=i,this.localObjectMap.set(this.nextLocalObjectId,e),e.setLocalObjectId(this.nextLocalObjectId),this.nextLocalObjectId=this.nextLocalObjectId+1,this.proxy.sendMessage(n),null!=this.messageHistoryQueue&&this.messageHistoryQueue.push(n)},e.prototype.invokeMethod=function(e,t,i,n){if(!this.isConnected)return r.MMR_WARN("RemoteObjectManager::invokeMethod - dropping method call while disconnected"),void n(-9,{});var a=new Object;a.messageType=o.INVOKE_METHOD,a.methodName=t,a.remoteObjectId=e,a.methodCallId=this.nextMethodCallId,a.args=i,this.nextMethodCallId=this.nextMethodCallId+1,this.checkForResendMessages(),0==this.resendMessageQueue.length&&this.localToRemoteIdMap.has(e)?this.invokeMethodInternal(n,a):(r.MMR_LOG("MsRdcMmr::RemoteObjectManager: Queueing method call on local object: "+e+" contentPortID: "+this.proxy.contentPortId),this.queuedMethodCalls.has(e)||this.queuedMethodCalls.set(e,new Array),this.queuedMethodCalls.get(e).push(new s(n,a)))},e.prototype.invokeMethodInternal=function(e,t){if("setMediaSourceOwner"==t.methodName){var i=t.args;if(null!=i.mediaSourceLocalObjectId&&null!=i.mediaSourceRemoteObjectId){var n=i.mediaSourceRemoteObjectId;this.localToRemoteIdMap.has(n)?(i.mediaSourceLocalObjectId=this.localToRemoteIdMap.get(n),t.args=i):r.MMR_WARN("MsRdcMmr::RemoteObjectManager: Invoking method id: "+t.methodCallId+" contentPortID: "+this.proxy.contentPortId+" setMediaSourceOwner fails because mediaSource was not created")}else r.MMR_WARN("MsRdcMmr::RemoteObjectManager: Invoking method id: "+t.methodCallId+" contentPortID: "+this.proxy.contentPortId+" invalid setMediaSourceOwner message")}var o=t.methodCallId;r.MMR_ASSERT(null!=o),r.MMR_ASSERT(null!=t.remoteObjectId);var a=this.localToRemoteIdMap.get(t.remoteObjectId);r.MMR_ASSERT(null!=a),t.localObjectId=a,r.MMR_LOG("MsRdcMmr::RemoteObjectManager: Invoking method id: "+o+", localObjectId: "+a+" contentPortID: "+this.proxy.contentPortId),this.proxy.sendMessage(t),this.pendingMethodCalls.set(o,new s(e,t)),null!=this.messageHistoryQueue&&this.messageHistoryQueue.push(t)},e.prototype.onReceivedMessage=function(e){var t=e.messageType;if(r.MMR_ASSERT(null!=t),r.MMR_LOG("MsRdcMmr::RemoteObjectManager: Received message type: "+t),t==o.CREATE_OBJECT_RESPONSE){var i=e.remoteObjectId;r.MMR_ASSERT(null!=i);var a=e.localObjectId;r.MMR_ASSERT(null!=a);var s=this.localObjectMap.get(a);if(r.MMR_ASSERT(null!=s),this.localToRemoteIdMap.set(a,i),this.remoteToLocalObjectMap.set(i,s),r.MMR_LOG("MsRdcMmr::RemoteObjectManager: Object created (localObjectId: "+a+", remoteObjectId: "+i+")"),s.onRemoteObjectCreated(),this.proxy.sendMMREngagedMessage(),this.checkForResendMessages(),0==this.resendMessageQueue.length){var d=this;this.queuedMethodCalls.forEach((function(e,t){d.localToRemoteIdMap.has(t)&&(r.MMR_LOG("MsRdcMmr::RemoteObjectManager: Invoking queued method calls (count: "+e.length+")"),e.forEach((function(e,t,i){d.invokeMethodInternal(e.callback,e.messageObject)})),d.queuedMethodCalls.delete(t))}))}}else if(t==o.INVOKE_METHOD_RESPONSE){var l=e.methodCallId;r.MMR_ASSERT(null!=l);i=e.remoteObjectId;r.MMR_ASSERT(null!=i);s=this.remoteToLocalObjectMap.get(i);r.MMR_ASSERT(null!=s);var u=e.result;r.MMR_ASSERT(null!=u);var h=e.args;r.MMR_ASSERT(null!=h);var p=this.pendingMethodCalls.get(l);if(null==p)return void r.MMR_WARN("MsRdcMmr::RemoteObjectManager: (invokeMethodResponse) missing pendingMethodCall for methodCallId="+l+" remoteObjectId="+i);p.callback(u,h),this.pendingMethodCalls.delete(l)}else if(t==o.ON_EVENT){i=e.remoteObjectId;r.MMR_ASSERT(null!=i);s=this.remoteToLocalObjectMap.get(i);r.MMR_ASSERT(null!=s);var m=e.type;r.MMR_ASSERT(null!=m);var f=e.args;r.MMR_ASSERT(null!=f);var M=new CustomEvent(m,f);this.dispatchEvent(s.getLocalObjectId(),M)}else if(t==o.ON_ATTRIBUTE_UPDATE){i=e.remoteObjectId;r.MMR_ASSERT(null!=i);s=this.remoteToLocalObjectMap.get(i);r.MMR_ASSERT(null!=s);var b=e.name;r.MMR_ASSERT(null!=b);var g=e.value;r.MMR_ASSERT(null!=g||"duration"==b),s.onAttributeUpdate(b,g)}else if(t==o.ON_CONNECTION_EVENT){var O=e.event;if(r.MMR_ASSERT(null!=O),this.onConnectionEvent(O),null!=(i=e.remoteObjectId)){s=this.remoteToLocalObjectMap.get(i);r.MMR_ASSERT(null!=s),s.onConnectionEvent(O)}else this.localObjectMap.forEach((function(e,t,i){e.onConnectionEvent(O)}))}else t==c.ProxyCommon.CONTENT_BG_SAME_ORIGIN_PARENT_MESSAGE_TYPE&&(r.MMR_LOG("MsRdcMmr::RemoteObjectManager::onReceivedMessage - CONTENT_BG_SAME_ORIGIN_PARENT_MESSAGE_TYPE, resend messages: "+this.messageHistoryQueue.length+" contentPortID: "+this.proxy.contentPortId),this.resendMessageQueue.splice(0),this.resendMessageQueue=n(this.messageHistoryQueue),this.checkForResendMessages())},e.prototype.addEventListener=function(e,t,i,n,o){r.MMR_LOG("MsRdcMmr::RemoteObjectManager::addEventListener - type: "+t+", localObjectId: "+e),this.eventListeners.has(e)||this.eventListeners.set(e,new Map),this.eventListeners.get(e).has(t)||this.eventListeners.get(e).set(t,new Array),this.eventListeners.get(e).get(t).push(i)},e.prototype.removeEventListener=function(e,t,i,n){if(r.MMR_LOG("MsRdcMmr::RemoteObjectManager::removeEventListener"),this.eventListeners.has(e)){var o=this.eventListeners.get(e);if(o.has(t)){var a=o.get(t),c=a.indexOf(i);null!=c?(r.MMR_LOG("MsRdcMmr::RemoteObjectManager::removeEventListener - removing listener for localObjectId: "+e+", type: "+t),a.splice(c,1)):r.MMR_WARN("MsRdcMmr::RemoteObjectManager::removeEventListener - specified listener not found for localObjectId: "+e+", type: "+t)}else r.MMR_WARN("MsRdcMmr::RemoteObjectManager::removeEventListener - no event listeners registered for localObjectId: "+e+", type: "+t)}else r.MMR_WARN("MsRdcMmr::RemoteObjectManager::removeEventListener - localObjectId: "+e+" not registered")},e.prototype.dispatchEvent=function(e,t){if(r.MMR_LOG("MsRdcMmr::RemoteObjectManager::dispatchEvent - targetObjectId: "+e+", event.type: "+t.type),null==t.type)throw"UNSPECIFIED_EVENT_TYPE_ERR";var i=this.localObjectMap.get(e);if(i.invokeEvent(t),this.eventListeners.has(e)){var n=this.eventListeners.get(e);if(n.has(t.type)){var o=!1;return n.get(t.type).forEach((function(e,n,a){r.MMR_ASSERT(null!=i),o=!i.invokeEventListener(t,e)})),!(o=o&&t.cancelable)}r.MMR_LOG("MsRdcMmr::RemoteObjectManager::dispatchEvent - no listeners registered for type: "+t.type+", targetLocalObjectId: "+e)}else r.MMR_WARN("MsRdcMmr::RemoteObjectManager::dispatchEvent - no listeners registered for targetLocalObjectId: "+e)},e.prototype.cancelPendingCalls=function(e){this.pendingMethodCalls.forEach((function(t,i){t.messageObject.remoteObjectId==e&&(r.MMR_LOG("Aborting call: "+a.tryJsonStringify(t.messageObject)),t.callback(-9,{}),this.pendingMethodCalls.delete(i))}))},e}();t.RemoteObjectManager=d},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RegisterPageLogger=void 0;var n=i(0),o=function(){function e(){this.cachedLogs=new Array,this.flushLogsInterval=null,this.scheduleLogFlushTimer()}return e.prototype.scheduleLogFlushTimer=function(){var t=this;t.flushLogsInterval?console.log("PageLogger::scheduleLogFlush - timer already scheduled"):(console.log("PageLogger::scheduleLogFlush - scheduling timer"),t.flushLogsInterval=setInterval((function(){t.flushLogs()}),e.LOG_FLUSH_INTERVAL_MS))},e.prototype.cancelLogFlushTimer=function(){this.flushLogsInterval?(console.log("PageLogger::scheduleLogFlush - clearing existing timer"),clearInterval(this.flushLogsInterval),this.flushLogsInterval=null):console.log("PageLogger::scheduleLogFlush - timer already cleared")},e.prototype.Log=function(e){console.log(e),this.addToLogCache(n.CachedLogEntryType.INFO,e)},e.prototype.Error=function(e){console.error(e),this.addToLogCache(n.CachedLogEntryType.ERROR,e)},e.prototype.Warn=function(e){console.warn(e),this.addToLogCache(n.CachedLogEntryType.WARNING,e)},e.prototype.Assert=function(e){if(!n.LoggingCommon.Assert(e)){var t=n.LoggingCommon.GetAssertLog();document.dispatchEvent(new CustomEvent(n.LoggingCommon.LOGGING_PAGE_TO_CONTENT_EVENT,{detail:t}))}},e.prototype.addToLogCache=function(t,i){this.cachedLogs.push(new n.CachedLogEntry(t,i)),this.cachedLogs.length>=e.MAX_CACHE_ENTRIES&&this.flushLogs()},e.prototype.flushLogs=function(){var e={};e.type=n.LoggingCommon.FLUSH_LOGS_MESSAGE_TYPE,e.entries=this.cachedLogs,document.dispatchEvent(new CustomEvent(n.LoggingCommon.LOGGING_PAGE_TO_CONTENT_EVENT,{detail:e})),this.cachedLogs=new Array},e.MAX_CACHE_ENTRIES=100,e.LOG_FLUSH_INTERVAL_MS=5e3,e}();t.RegisterPageLogger=function(){n.InitializeLogger(new o)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RootWindowInfoTracker=void 0;var n=i(0);var o=function(){function e(e){this.nativeMessagingPageProxy=e,this.rootWindowOffset=new DOMRect(0,0,0,0),this.rootWindowTitle=void 0,this.titleModificationEnabled=!1,this.uniqueId=null,this.listenForSetInfo();var t=this;new MutationObserver((function(e,t){for(var i=0,n=e;i<n.length;i++){var o=n[i];if("childList"===o.type)for(var r=0,a=o.addedNodes;r<a.length;r++){var c=a[r];"iframe"==c.nodeName&&this.setParentInfoOnChild(c)}}})).observe(window.document,{childList:!0,subtree:!0}),setInterval((function(){t.setParentInfoOnChildren()}),1e3)}return e.prototype.getRootWindowTitle=function(){return null!=this.rootWindowTitle?(n.MMR_LOG("rootWindowInfoTracker title:"+this.rootWindowTitle),this.rootWindowTitle):(""==window.document.title&&(n.MMR_LOG("rootWindowInfoTracker no title, setTitleModificationEnabled"),this.setTitleModificationEnabled(!0)),!this.titleModificationEnabled&&window.document.title.includes("Microsoft Teams")&&(n.MMR_LOG("listenForSetInfo - setting titleModifcationEnabled to true for special case title="+window.document.title),this.setTitleModificationEnabled(!0)),n.MMR_LOG("rootWindowInfoTracker title:"+window.document.title),window.document.title)},e.prototype.getRootWindowInfo=function(){var e=new Object;return e.rootOffset=this.rootWindowOffset,e.title=this.getRootWindowTitle(),e},e.prototype.setParentInfoOnChildren=function(){for(var e=window.document.getElementsByTagName("iframe"),t=0;t<e.length;t++)this.setParentInfoOnChild(e[t])},e.prototype.setParentInfoOnChild=function(e){var t=new DOMRect(0,0,0,0);t.x=this.rootWindowOffset.x,t.y=this.rootWindowOffset.y;var i=e.getBoundingClientRect();t.x+=i.x,t.y+=i.y;var n=this.getRootWindowTitle(),o=this.nativeMessagingPageProxy.nativePortId,r=self.origin;e.contentWindow.postMessage({rootOffset:t,rootTitle:n,rootNativePortId:o,rootOrigin:r},"*")},e.prototype.listenForSetInfo=function(){var e=this;window.addEventListener("message",(function(t){null!=t.data&&null!=t.data.rootOffset&&null!=t.data.rootTitle?(e.rootWindowOffset=t.data.rootOffset,e.rootWindowTitle=t.data.rootTitle,n.MMR_ASSERT(null!=t.data.rootNativePortId),n.MMR_ASSERT(null!=t.data.rootOrigin),e.updateParentSameOrigin(t.data.rootNativePortId,t.data.rootOrigin)):null!=t.data&&null!=t.data.titleModificationEnabled&&(n.MMR_LOG("listenForSetInfo - updating titleModificationEnabled: "+t.data.titleModificationEnabled),e.setTitleModificationEnabled(t.data.titleModificationEnabled))}))},e.prototype.updateParentSameOrigin=function(e,t){console.log("updateParentSameOrigin - this.origin="+self.origin+" parentOrigin="+t+" currentPortId="+this.nativeMessagingPageProxy.nativePortId+" parentContentPortId="+e),self.origin==t&&this.nativeMessagingPageProxy.nativePortId!=e&&this.nativeMessagingPageProxy.sendSameOriginParentId(e)},e.prototype.setTitleModificationEnabled=function(e){this.titleModificationEnabled=e,window.parent!=window?this.setTitleModInfoOnParent():this.updateTitleModLocal()},e.prototype.updateTitleModLocal=function(){this.titleModificationEnabled&&null==this.uniqueId&&(this.uniqueId="xxxx-xxxx-xxx-xxxx".replace(/[x]/g,(function(e){return Math.floor(16*Math.random()).toString(16)})));var e=" ["+this.uniqueId+"]",t=-1!=window.document.title.indexOf(e);this.titleModificationEnabled&&!t?window.document.title+=e:!this.titleModificationEnabled&&t&&(window.document.title=window.document.title.replace(e,"")),n.MMR_LOG("updateTitleModLocal: titleModificationEnabled: "+this.titleModificationEnabled+" window.document.title: "+window.document.title)},e.prototype.setTitleModInfoOnParent=function(){n.MMR_LOG("setTitleModInfoOnParent: titleModificationEnabled: "+this.titleModificationEnabled),n.MMR_ASSERT(null!=window.parent),window.parent.postMessage({titleModificationEnabled:this.titleModificationEnabled},"*")},e}();t.RootWindowInfoTracker=o},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setupMediaDevicesShims=t.MediaDevicesRedirect=void 0;var n=i(1),o=i(7),r=function(){function e(e){switch(this.deviceId=e.deviceId,this.groupId=e.groupId,this.label=e.label,e.kind){case 0:this.kind="audioinput";break;case 1:this.kind="audiooutput";break;case 2:this.kind="videoinput"}}return e.prototype.toJSON=function(){return this},e}(),a=function(){function e(e,t){this.remoteObjectManager=e,this.localObjectId=0,this.createdRemoteObject=!1,this.remoteObjectActive=!1,this._ondevicechange=null,this.disconnected=!1,console.log("MediaDevicesRedirect constructor"),this.originalMediaDevices=navigator.mediaDevices,this.occlusionSupportVersion=t}return e.prototype.ensureObjectCreated=function(){this.createdRemoteObject||(this.createdRemoteObject=!0,this.remoteObjectManager.createObject(this,"MediaDevices",{occlusionSupportVersion:this.occlusionSupportVersion}))},e.prototype.setLocalObjectId=function(e){this.localObjectId=e},e.prototype.getLocalObjectId=function(){return this.localObjectId},e.prototype.onRemoteObjectCreated=function(){this.remoteObjectActive=!0},e.prototype.invokeEvent=function(e){},e.prototype.invokeEventListener=function(e,t){console.log("MediaDevicesRedirect::invokeEventListener - type: "+e.type),null!=t.handleEvent?t.handleEvent():(Object.defineProperty(e,"target",{value:this}),Object.defineProperty(e,"currentTarget",{value:this}),t(e))},e.prototype.onAttributeUpdate=function(e,t){console.log("MediaDevicesRedirect::onAttributeUpdate - name: "+e+", value: "+n.tryJsonStringify(t))},e.prototype.onConnectionEvent=function(e){"clientConnected"==e?(console.log("MediaDevicesRedirect::onConnectionEvent - clientConnected"),this.disconnected&&(this.disconnected=!1,this.SendConnectionStateChangedEvent("connected"),this.createdRemoteObject=!1)):"clientDisconnected"==e&&(this.disconnected=!0,this.remoteObjectManager.cancelPendingCalls(this.localObjectId),this.remoteObjectActive=!1,this.SendConnectionStateChangedEvent("disconnected"))},Object.defineProperty(e.prototype,"ondevicechange",{get:function(){return this._ondevicechange},set:function(e){this._ondevicechange&&(this.removeEventListener("devicechange",this._ondevicechange,null),delete this._ondevicechange),e&&this.addEventListener("devicechange",this._ondevicechange=e,null)},enumerable:!1,configurable:!0}),e.prototype.enumerateDevices=function(){var e=n.getShimObject(this)?n.getShimObject(this):this;return console.log("MediaDevicesRedirect::enumerateDevices[BEGIN] - Local object id: "+JSON.stringify(e.localObjectId)),new Promise((function(t,i){e.ensureObjectCreated(),e.remoteObjectManager.invokeMethod(e.localObjectId,"enumerateDevices",{},(function(e,o){if(console.log("MediaDevicesRedirect::enumerateDevices[END] - result: 0x"+e.toString(16)+" args: "+n.tryJsonStringify(o)),e>=0){var a=[];if(o)o.forEach((function(e){a.push(new r(e))}));t(a)}else i(n.mmrWebRtcStatusToDOMError(e))}))}))},e.prototype.getSupportedConstraints=function(){return{deviceId:!0}},e.prototype.getUserMedia=function(e){var t=n.getShimObject(this)?n.getShimObject(this):this;return console.log("MediaDevicesRedirect::getUserMedia[BEGIN] - constraints: "+JSON.stringify(e)+" - Local object id: "+JSON.stringify(t.localObjectId)),new Promise((function(i,r){t.ensureObjectCreated(),t.remoteObjectManager.invokeMethod(t.localObjectId,"getUserMedia",{constraints:e},(function(e,a){if(console.log("MediaDevicesRedirect::getUserMedia[END] - result: 0x"+e.toString(16)+" - args: "+JSON.stringify(a)),e>=0){var c=new MediaStream;if(null!=a.streamId){var s=o.createMediaStreamShim(c,a.streamId);a.tracks.forEach((function(e){o.createTrackRedirectOnMediaStream(t.remoteObjectManager,c,e.trackId,e.trackLabel,e.settings,e.kind)})),i(s)}else{s=o.createMediaStreamShim(c,a.streamIds[0]);o.createTrackRedirectOnMediaStream(t.remoteObjectManager,c,a.trackId,a.trackLabel,a.settings,a.kind),i(s)}}else r(n.mmrWebRtcStatusToDOMError(e))}))}))},e.prototype.addEventListener=function(e,t,i){console.log("MediaDevicesRedirect::addEventListener - type: "+e);var o=n.getShimObject(this)?n.getShimObject(this):this;o.ensureObjectCreated(),o.remoteObjectManager.addEventListener(o.localObjectId,e,t,i)},e.prototype.removeEventListener=function(e,t,i){console.log("MediaDevicesRedirect::removeEventListener - type: "+e);var o=n.getShimObject(this)?n.getShimObject(this):this;o.ensureObjectCreated(),o.remoteObjectManager.removeEventListener(o.localObjectId,e,t,i)},e.prototype.dispatchEvent=function(e){console.log("MediaDevicesRedirect::dispatchEvent - type: "+e.type);var t=n.getShimObject(this)?n.getShimObject(this):this;return t.ensureObjectCreated(),t.remoteObjectManager.dispatchEvent(t.localObjectId,e)},e.prototype.SendConnectionStateChangedEvent=function(e){console.log("MediaDevicesRedirect Sending connection state changed event - state: "+e);var t=new CustomEvent("rdpClientConnectionStateChanged",{detail:{state:e}});this.dispatchEvent(t)},e}();t.MediaDevicesRedirect=a,t.setupMediaDevicesShims=function(e,t,i){console.log("Shimming media devices");var o=new a(e,i);window.navigator.mediaDevices[n.shimPropertyName]=o,["enumerateDevices","getSupportedConstraints","getUserMedia","addEventListener","removeEventListener","dispatchEvent"].forEach((function(e){window.navigator.mediaDevices[e]=o[e]})),window.navigator.mediaDevices.isRemote=!0}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.shimAudioClass=t.setupAudioElementShims=t.AudioElementShim=void 0;var n=i(1),o=i(29),r=i(4),a=i(0),c=function(){function e(t){var i=new e.originalAudioClass;return d(e.remoteObjectManager,e.fallbackObjectManager,e.occlusionSupportVersion,i),null!=t&&(i.src=t),i}return e.originalAudioClass=Audio,e}(),s=function(){function e(t,i,r,c){this.remoteObjectManager=t,this.fallbackObjectManager=i,this.originalElement=c,this.duration=NaN,this.readyState=0,this.seeking=!1,this.nodeType=Node.ELEMENT_NODE,this.tagName="audio",this.originalSetters={},this.playbackPathMode=n.ShimCommon.initialPlaybackPathMode,a.MMR_LOG("AudioElementShim::AudioElementShim"),this.playbackPathMode!=n.PlaybackPathMode.LOCAL&&(this.audioElementRedirect=new o.AudioElementRedirect(t,c,r)),this.ownerDocument=window.document,this.fallbackObjectManager.addFallbackVideoElement(this),this.originalElement[n.shimPropertyName]=this,this.textTracks=new n.TextTrackListProxy,this.buffered=n.createTimeRanges(new Object),this.seekable=n.createTimeRanges(new Object);var s=this;e.shimmedMethods.forEach((function(e){s[e+"_original"]=c[e],c[e]=s[e]})),this.setIdlAttribute_original=function(e,t){return null!=s.originalSetters["set_"+e+"_original"]?s.originalSetters["set_"+e+"_original"].apply(c,[t]):(c[e+"_noshim_"]=t,!0)},e.shimmedProperties.forEach((function(t){var i=c[t],o=c.__lookupGetter__(t);null==o&&(o=function(){return c[t+"_noshim_"]}),s.originalSetters["set_"+t+"_original"]=c.__lookupSetter__(t);var r=e.boolShimmedProperties.includes(t)?function(e){s.setIdlAttribute(t,!!e)}:function(e){s.setIdlAttribute(t,e)};Object.defineProperty(c,t,{get:function(){return s.playbackPathMode==n.PlaybackPathMode.LOCAL?o.apply(c):(a.MMR_LOG("AudioElementShim["+s.fallbackObjectId+"]::get - "+t+"="+s[t]),s[t])},set:function(e){return a.MMR_LOG("AudioElementShim["+s.fallbackObjectId+"]::set - "+t+"="+e),r(e),!0}});var d=e.boolShimmedProperties.includes(t)?!!i:i;s[t]=d,"src"==t&&null!=d&&""!=d&&s.switchToLocal(),s.playbackPathMode!=n.PlaybackPathMode.LOCAL&&s.audioElementRedirect.setIdlAttribute.apply(s.audioElementRedirect,[t,d])})),e.eventHandlers.forEach((function(e){var t="_on"+e+"eventHandler";Object.defineProperty(c,"on"+e,{get:function(){return s[t]||null},set:function(i){return null!=s[t]&&(s.removeEventListener(e,s[t],null),delete s[t]),null!=i&&(s[t]=i,s.addEventListener(e,s[t],null)),!0}})}))}return e.prototype.setFallbackObjectId=function(e){a.MMR_LOG("AudioElementShim["+this.fallbackObjectId+"]::fallbackObjectId"),this.fallbackObjectId=e},e.prototype.switchToLocal=function(){a.MMR_LOG("AudioElementShim["+this.fallbackObjectId+"]::switchToLocal"),this.playbackPathMode==n.PlaybackPathMode.UNKNOWN&&(this.audioElementRedirect.cancelRemote(),this.playbackPathMode=n.PlaybackPathMode.LOCAL,this.fallbackObjectManager.switchToLocal(this.fallbackObjectId))},e.prototype.switchToRemote=function(){a.MMR_LOG("AudioElementShim["+this.fallbackObjectId+"]::switchToRemote"),this.playbackPathMode==n.PlaybackPathMode.UNKNOWN&&(this.playbackPathMode=n.PlaybackPathMode.REMOTE,this.fallbackObjectManager.switchToRemote(this.fallbackObjectId))},e.prototype.appendChild=function(e){a.MMR_LOG("AudioElementShim::appendChild: "+e.nodeName);var t=n.getShimObject(this)?n.getShimObject(this):this;t.appendChild_original.apply(t.originalElement,[e]),"SOURCE"==e.nodeName&&t.switchToLocal()},e.prototype.localOrRemoteExecute=function(t,i){var o=this;a.MMR_ASSERT(e.shimmedMethods.includes(t)||"setIdlAttribute"==t);var c=void 0,s=function(){return o[t+"_original"].apply(o.originalElement,i)};switch(this.playbackPathMode){case n.PlaybackPathMode.REMOTE:c=this.audioElementRedirect[t].apply(this.audioElementRedirect,i);break;case n.PlaybackPathMode.UNKNOWN:c=this.audioElementRedirect[t].apply(this.audioElementRedirect,i),e.postFallbackQueueMethods.includes(t)?this.fallbackObjectManager.queueFallbackFunction(this.fallbackObjectId,s,r.QueueType.POSTFALLBACK):this.fallbackObjectManager.queueFallbackFunction(this.fallbackObjectId,s);break;case n.PlaybackPathMode.LOCAL:c=s()}return a.MMR_LOG("AudioElementShim["+this.fallbackObjectId+"]::localOrRemoteExecute - functionName="+t+" args="+i+" return="+c),c},e.prototype.localOrRemoteExecuteFunctions=function(e,t){switch(this.playbackPathMode){case n.PlaybackPathMode.REMOTE:return t();case n.PlaybackPathMode.UNKNOWN:return this.fallbackObjectManager.queueFallbackFunction(this.fallbackObjectId,e),t();case n.PlaybackPathMode.LOCAL:return e()}},e.prototype.setContentAttribute=function(e,t){a.MMR_LOG("AudioElementShim["+this.fallbackObjectId+"]::setContentAttribute - name: "+e+", value: "+t),this.playbackPathMode==n.PlaybackPathMode.UNKNOWN&&"src"==e&&null!=t&&""!=t&&this.switchToLocal(),this.playbackPathMode!=n.PlaybackPathMode.LOCAL&&this.audioElementRedirect.onContentAttributeUpdated(e,t)},e.prototype.setIdlAttribute=function(e,t){a.MMR_LOG("AudioElementShim["+this.fallbackObjectId+"]::setIdlAttribute - name: "+e+", value: "+t),this[e]=t,"srcObject"==e?null!=t&&(!0===t.isMSRDCObject?this.switchToRemote():(a.MMR_LOG("AudioElementShim["+this.fallbackObjectId+"]::setIdlAttribute - srcObject being set to non-WebRTC object"),this.switchToLocal())):"src"==e&&null!=t&&""!=t&&this.switchToLocal(),this.localOrRemoteExecute("setIdlAttribute",[e,t])},e.prototype.setAttribute=function(e,t){a.MMR_LOG("AudioElementShim["+this.fallbackObjectId+"]::setAttribute - name: "+e+", value: "+t);var i=n.getShimObject(this)?n.getShimObject(this):this;i.setAttribute_original.apply(i.originalElement,[e,t]),i.setContentAttribute(e,t)},e.prototype.removeAttribute=function(e){a.MMR_LOG("AudioElementShim["+this.fallbackObjectId+"]::removeAttribute - name: "+e);var t=n.getShimObject(this)?n.getShimObject(this):this;t.removeAttribute_original.apply(t.originalElement,[e]),t.setContentAttribute(e,void 0)},e.prototype.pause=function(){a.MMR_LOG("AudioElementShim["+this.fallbackObjectId+"]::pause");var e=n.getShimObject(this)?n.getShimObject(this):this;e.playbackPathMode!=n.PlaybackPathMode.LOCAL&&(n.getShimObject(this).paused=!0),e.localOrRemoteExecute("pause",[])},e.prototype.play=function(){a.MMR_LOG("AudioElementShim["+this.fallbackObjectId+"]::play");var e=n.getShimObject(this)?n.getShimObject(this):this;return e.playbackPathMode!=n.PlaybackPathMode.LOCAL&&(n.getShimObject(this).paused=!1),new Promise((function(t,i){e.localOrRemoteExecuteFunctions((function(){e.play_original.apply(e.originalElement).then((function(e){t()})).catch((function(e){i(e)}))}),(function(){e.audioElementRedirect.play().then((function(e){t()})).catch((function(e){i(e)}))}))}))},e.prototype.setSinkId=function(e){var t=n.getShimObject(this)?n.getShimObject(this):this;return a.MMR_LOG("AudioElementShim["+this.fallbackObjectId+"]::setSinkId: elementId: "+t.originalElement.id),new Promise((function(i,n){t.localOrRemoteExecuteFunctions((function(){a.MMR_LOG("Accepting the requested device id when executing setSinkId on local element"),i()}),(function(){t.audioElementRedirect.setSinkId(e).then((function(e){i()})).catch((function(e){n(e)}))}))}))},e.prototype.addEventListener=function(t,i,o){a.MMR_LOG("AudioElementShim::addEventListener - type: "+t);var r=n.getShimObject(this)?n.getShimObject(this):this;if(!e.eventHandlers.includes(t))return r.addEventListener_original.apply(r.originalElement,[t,i,o]);r.localOrRemoteExecute("addEventListener",[t,i,o])},e.prototype.removeEventListener=function(t,i,o){a.MMR_LOG("AudioElementShim::removeEventListener - type: "+t);var r=n.getShimObject(this)?n.getShimObject(this):this,c=r.removeEventListener_original.apply(r.originalElement,[t,i,o]);return e.eventHandlers.includes(t)&&(c=r.localOrRemoteExecute("removeEventListener",[t,i,o])),c},e.prototype.dispatchEvent=function(e){return a.MMR_LOG("AudioElementShim::dispatchEvent - type: "+e.type),(n.getShimObject(this)?n.getShimObject(this):this).localOrRemoteExecute("dispatchEvent",[e])},e.eventHandlers=["abort","canplay","canplaythrough","durationchange","emptied","ended","error","loadeddata","loadedmetadata","loadstart","pause","play","playing","progress","ratechange","seeked","seeking","stalled","suspend","timeupdate","volumechange","waiting"],e.shimmedMethods=["appendChild","setAttribute","removeAttribute","play","pause","setSinkId","addEventListener","removeEventListener","dispatchEvent"],e.shimmedProperties=o.AudioElementRedirect.redirectAttributes,e.boolShimmedProperties=o.AudioElementRedirect.boolRedirectAttributes,e.postFallbackQueueMethods=["addEventListener","removeEventListener"],e}();function d(e,t,i,n){a.MMR_LOG("Shimming audio element: "+n.outerHTML);new s(e,t,i,n);return n}t.AudioElementShim=s,t.setupAudioElementShims=d,t.shimAudioClass=function(e,t,i){a.MMR_LOG("Shimming JavaScript Audio class"),c.remoteObjectManager=e,c.fallbackObjectManager=t,c.occlusionSupportVersion=i,window.Audio=c}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AudioElementRedirect=void 0;var n=i(1),o=i(0),r=function(){function e(e,t,i){this.remoteObjectManager=e,this.originalElement=t,this.occlusionSupportVersion=i,this.localObjectId=0,this.mutationObserver=null,this.switchToLocal=!1,this.remoteObjectActive=!1,this.remoteObjectManager.createObject(this,"AudioElement",{occlusionSupportVersion:i});var n=this,o=t;this.mutationObserver=new MutationObserver((function(e,t){for(var i=0,r=e;i<r.length;i++){var a=r[i];n.onContentAttributeUpdated(a.attributeName,o.hasAttribute(a.attributeName)?o.getAttribute(a.attributeName):void 0)}})),this.mutationObserver.observe(o,{attributes:!0})}return e.prototype.onContentAttributeUpdated=function(t,i){o.MMR_LOG("AudioElementRedirect["+this.localObjectId+"]::onContentAttributeUpdated - name: "+t+", value: "+i);var r=n.getShimObject(this.originalElement);if("muted"!=t&&r.playbackPathMode!=n.PlaybackPathMode.LOCAL&&e.redirectAttributes.includes(t))if(e.boolRedirectAttributes.includes(t)){var a=void 0!==i;r[t]!=a&&(r[t]=a,this.setIdlAttribute(t,a))}else r[t]!=i&&(r[t]=i,this.setIdlAttribute(t,i))},e.prototype.setIdlAttribute=function(t,i){o.MMR_LOG("AudioElementRedirect["+this.localObjectId+"]::setIdlAttribute[BEGIN] - name: "+t+", value: "+i);var r=i;if("srcObject"!=t){if(e.boolRedirectAttributes.includes(t)&&(r=!1===i||void 0===i?"false":"true"),e.redirectAttributes.includes(t)){var a=this;this.remoteObjectManager.invokeMethod(this.localObjectId,"setAttribute",{name:t,value:r},(function(e,r){(o.MMR_LOG("AudioElementRedirect["+a.localObjectId+"]::setIdlAttribute[END] - result: 0x"+e.toString(16)),0==e)&&("srcObject"==t&&null!=i?(a.dispatchEvent(new CustomEvent("loadeddata",{})),a.dispatchEvent(new CustomEvent("canplay",{})),a.dispatchEvent(new CustomEvent("canplaythrough",{})),1==n.getShimObject(a.originalElement).autoplay&&(a.dispatchEvent(new CustomEvent("play",{})),a.dispatchEvent(new CustomEvent("playing",{})))):"volume"!=t&&"muted"!=t||a.dispatchEvent(new CustomEvent("volumechange",{})))}))}}else this.setNewMediaStream(i)},e.prototype.setNewMediaStream=function(e){var t,i;if(e!=this.mediaStream){this.mediaStream&&(this.mediaStream.removeEventListener("addtrack",this.addTrackRef),this.mediaStream.removeEventListener("removetrack",this.removeTrackRef)),this.mediaStream=e;var n=void 0;if(this.mediaStream){var o=this;this.mediaStream.addEventListener("addtrack",this.addTrackRef=function(e){o.mediaStreamTrackUpdate(e)}),this.mediaStream.addEventListener("removetrack",this.removeTrackRef=function(e){o.mediaStreamTrackUpdate(e)}),(null===(t=this.mediaStream)||void 0===t?void 0:t.getAudioTracks().length)>0&&(n=null===(i=this.mediaStream)||void 0===i?void 0:i.getAudioTracks()[0])}this.setAudioTrack(n)}},e.prototype.mediaStreamTrackUpdate=function(e){var t,i,n=void 0;"audio"==e.track.kind&&(this.mediaStream&&(null===(t=this.mediaStream)||void 0===t?void 0:t.getAudioTracks().length)>0&&(n=null===(i=this.mediaStream)||void 0===i?void 0:i.getAudioTracks()[0]),this.setAudioTrack(n,e.type))},e.prototype.setAudioTrack=function(e,t){if(e!=this.audioTrack){this.audioTrack=e;var i=null;this.audioTrack&&(i=this.audioTrack.id);var r=this;o.MMR_LOG("AudioElementRedirect["+r.localObjectId+"]::setAudioTrack[BEGIN] - track: "+i),this.remoteObjectManager.invokeMethod(this.localObjectId,"setAttribute",{name:"srcObject",value:i},(function(e,i){(o.MMR_LOG("AudioElementRedirect["+r.localObjectId+"]::setAudioTrack[END] - result: 0x"+e.toString(16)),0==e&&"removetrack"!=t)&&(r.dispatchEvent(new CustomEvent("loadeddata",{})),r.dispatchEvent(new CustomEvent("canplay",{})),r.dispatchEvent(new CustomEvent("canplaythrough",{})),1==n.getShimObject(r.originalElement).autoplay&&(r.dispatchEvent(new CustomEvent("play",{})),r.dispatchEvent(new CustomEvent("playing",{}))))}))}},e.prototype.setLocalObjectId=function(e){this.localObjectId=e},e.prototype.getLocalObjectId=function(){return this.localObjectId},e.prototype.cancelRemote=function(){o.MMR_LOG("AudioElementRedirect["+this.localObjectId+"]::cancelRemote[BEGIN]"),this.switchToLocal=!0,this.mutationObserver.disconnect()},e.prototype.onRemoteObjectCreated=function(){this.remoteObjectActive=!0},e.prototype.invokeEvent=function(e){o.MMR_LOG("AudioElementRedirect["+this.localObjectId+"]::invokeEvent - type: "+e.type),n.getShimObject(this.originalElement).dispatchEvent_original.apply(this.originalElement,[e])},e.prototype.invokeEventListener=function(e,t){if(o.MMR_LOG("AudioElementRedirect["+this.localObjectId+"]::invokeEventListener - type: "+e.type),"error"!=e.type)if(null!=t.handleEvent)t.handleEvent();else{var i=this.originalElement;Object.defineProperty(e,"target",{value:i}),Object.defineProperty(e,"currentTarget",{value:i}),t.apply(i,[e])}else n.getShimObject(this.originalElement).switchToLocal("AudioElementRedirect received an error event.")},e.prototype.onAttributeUpdate=function(e,t){o.MMR_LOG("AudioElement["+this.localObjectId+"]::onAttributeUpdate - name: "+e+", value: "+n.tryJsonStringify(t));var i=n.getShimObject(this.originalElement);"buffered"!=e&&"seekable"!=e||(t=n.createTimeRanges(t)),i[e]=t},e.prototype.onConnectionEvent=function(e){o.MMR_LOG("AudioElementRedirect["+this.localObjectId+"]::onConnectionEvent - eventType: "+e),"clientDisconnected"==e?this.remoteObjectActive=!1:"switchToRemote"==e&&n.getShimObject(this.originalElement).switchToRemote()},e.prototype.pause=function(){o.MMR_LOG("AudioElementRedirect["+this.localObjectId+"]::pause[BEGIN]");var e=this;this.remoteObjectManager.invokeMethod(this.localObjectId,"pause",{type:"audio"},(function(t,i){o.MMR_LOG("AudioElementRedirect["+e.localObjectId+"]::pause[END] - result: 0x"+t.toString(16)),0==t&&e.dispatchEvent(new CustomEvent("pause",{}))}))},e.prototype.play=function(){o.MMR_LOG("AudioElementRedirect["+this.localObjectId+"]::play[BEGIN]");var e=this;return new Promise((function(t,i){e.remoteObjectManager.invokeMethod(e.localObjectId,"play",{type:"audio"},(function(r,a){o.MMR_LOG("AudioElementRedirect["+this.localObjectId+"]::play[END] - result: 0x"+r.toString(16)),r>=0?(n.getShimObject(e.originalElement).paused=!1,t(),0==r?(e.dispatchEvent(new CustomEvent("play",{})),e.dispatchEvent(new CustomEvent("playing",{}))):e.dispatchEvent(new CustomEvent("waiting",{}))):i()}))}))},e.prototype.setSinkId=function(e){o.MMR_LOG("AudioElementRedirect["+this.localObjectId+"]::setSinkId[BEGIN] - sinkId: "+e);var t=this;return new Promise((function(i,r){t.remoteObjectManager.invokeMethod(t.localObjectId,"setSinkId",{sinkId:e},(function(e,t){o.MMR_LOG("AudioElementRedirect["+this.localObjectId+"]::setSinkId[END] - result: 0x"+e.toString(16)),e>=0?i():r(n.mmrWebRtcStatusToDOMError(e))}))}))},e.prototype.load=function(){o.MMR_LOG("AudioElementRedirect["+this.localObjectId+"]::load[BEGIN] - src:")},e.prototype.addEventListener=function(e,t,i){o.MMR_LOG("AudioElementRedirect["+this.localObjectId+"]::addEventListener - type: "+e),this.remoteObjectManager.addEventListener(this.localObjectId,e,t,i)},e.prototype.removeEventListener=function(e,t,i){o.MMR_LOG("AudioElementRedirect["+this.localObjectId+"]::removeEventListener - type: "+e),this.remoteObjectManager.removeEventListener(this.localObjectId,e,t,i)},e.prototype.dispatchEvent=function(e){return o.MMR_LOG("AudioElementRedirect["+this.localObjectId+"]::dispatchEvent - type: "+e.type),this.remoteObjectManager.dispatchEvent(this.localObjectId,e)},e.redirectAttributes=["autoplay","volume","src","srcObject","muted","paused"],e.boolRedirectAttributes=["autoplay","muted","paused"],e}();t.AudioElementRedirect=r},function(e,t,i){"use strict";var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}),r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,i=1,n=arguments.length;i<n;i++)for(var o in t=arguments[i])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.setupRTCPeerConnectionShims=t.RTCPeerConnectionRedirect=void 0;var a=i(1),c=i(7),s=i(11),d=i(0),l=i(31);function u(e){var t=new Map;return e.stats.forEach((function(e){var i={};Object.keys(e).forEach((function(t){if("stats_map"===t){var n=e[t];for(var o in n)Object.defineProperty(i,o,{value:n[o],writable:!1,enumerable:!0})}else Object.defineProperty(i,t,{value:e[t],writable:!1,enumerable:!0})})),t.set(e.id,i)})),t}var h=function(e,t){this.type=e,this.sdp=t},p=function(e){function t(t,i){var n=e.call(this)||this;return n.canInsertDTMF=!1,n.toneBuffer="",n.parentLocalObjectId=t,n.id=i,n.eventTarget=n,n.shimEventHandlers(n,["tonechange"]),n}return o(t,e),t.prototype.insertDTMF=function(e,t,i){if(new RegExp("[^a-dA-D0-9#*,]").test(e))throw new DOMException("Invalid DTMF tone character","InvalidCharacterError");this.toneBuffer=e,b.remoteObjectManager.invokeMethod(this.parentLocalObjectId,"insertDTMF",{trackId:this.id,tones:e,duration:null!=t?t:100,interToneGap:null!=i?i:70},(function(e,t){d.MMR_LOG("MmrRTCRtpSender::insertDTMF[END] - result: 0x"+e.toString(16)),e<0&&(this.toneBuffer="")}))},t.prototype.processToneChange=function(e){var t=e.tone;this.toneBuffer=e.toneBuffer,this.dispatchEvent(new RTCDTMFToneChangeEvent("tonechange",{tone:t}))},t}(c.MmrEventTarget),m=function(){function e(e,t,i){this.transport=null,this.rtcpTransport=null,this.parentLocalObjectId=e,this.track=t,this.id=i,this.dtmf=new p(e,i),this.parameters={encodings:[],transactionId:"",codecs:[],headerExtensions:[],rtcp:{}}}return e.prototype.getParameters=function(){return r({},this.parameters)},e.prototype.getStats=function(){d.MMR_LOG("MmrRTCRtpSender::getStats[BEGIN]");var e=this;return new Promise((function(t,i){b.remoteObjectManager.invokeMethod(e.parentLocalObjectId,"getStats",{trackId:e.track.id},(function(e,n){if(d.MMR_LOG("MmrRTCRtpSender::getStats[END] - result: 0x"+e.toString(16)),e>=0){var o=u(n);t(o)}else i(a.mmrWebRtcStatusToDOMError(e))}))}))},e.prototype.replaceTrack=function(e){var t=e?e.id:"";d.MMR_LOG("MmrRTCRtpSender::replaceTrack[BEGIN] - sender: "+this.id+" - track: "+t);var i=this;return new Promise((function(n,o){b.remoteObjectManager.invokeMethod(i.parentLocalObjectId,"replaceTrack",{senderId:i.id,trackId:t},(function(t,r){d.MMR_LOG("MmrRTCRtpSender::replaceTrack[END] - result: 0x"+t.toString(16)),t>=0?(i.track=e,n()):o(a.mmrWebRtcStatusToDOMError(t))}))}))},e.prototype.setParameters=function(e){d.MMR_LOG("MmrRTCRtpSender::setParameters[BEGIN]");var t=this;return new Promise((function(i,n){b.remoteObjectManager.invokeMethod(t.parentLocalObjectId,"setParameters",{trackId:t.track.id,parameters:e},(function(e,o){d.MMR_LOG("MmrRTCRtpSender::setParameters[END] - result: 0x"+e.toString(16)),e>=0?(t.initialize(o),i()):n(a.mmrWebRtcStatusToDOMError(e))}))}))},e.prototype.setStreams=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];d.MMR_LOG("MmrRTCRtpSender::setStreams[BEGIN]");var i=this;e.forEach((function(e){e.addTrack(i.track)}));var n=Array.from(e,(function(e){return e.id}));b.remoteObjectManager.invokeMethod(this.parentLocalObjectId,"setStreams",{trackId:this.track.id,streamIds:n},(function(e,t){d.MMR_LOG("MmrRTCRtpSender::setStreams[END] - result: 0x"+e.toString(16))}))},e.prototype.initialize=function(e){var t=e.encodings,i=e.codecs,n=e.headerExtensions,o=e.rtcp;this.parameters={encodings:t,transactionId:e.transactionId,codecs:i,headerExtensions:n,rtcp:o},this.dtmf.canInsertDTMF=e.canInsertDTMF},e.prototype.setId=function(e){this.id=e},e}(),f=function(){function e(e,t,i){this.csrcs=[],this.ssrcs=[],this.rtcpTransport=null,this.transport=null,this.parentLocalObjectId=e,this.track=t,i&&this.initialize(i)}return e.prototype.getContributingSources=function(){d.MMR_LOG("MmrRTCRtpReceiver::getContributingSources[BEGIN]");var e=this;return b.remoteObjectManager.invokeMethod(e.parentLocalObjectId,"getContributingSources",{trackId:e.track.id},(function(t,i){d.MMR_LOG("MmrRTCRtpReceiver::getContributingSources[END] - result: 0x"+t.toString(16)),t>=0&&(e.csrcs=i.csrcs)})),this.csrcs},e.prototype.getParameters=function(){return this.parameters},e.prototype.getStats=function(){d.MMR_LOG("MmrRTCRtpReceiver::getStats[START]");var e=this;return new Promise((function(t,i){b.remoteObjectManager.invokeMethod(e.parentLocalObjectId,"getStats",{trackId:e.track.id},(function(e,n){if(d.MMR_LOG("MmrRTCRtpReceiver::getStats[END] - result: 0x"+e.toString(16)),e>=0){var o=u(n);t(o)}else i(a.mmrWebRtcStatusToDOMError(e))}))}))},e.prototype.getSynchronizationSources=function(){console.log("MmrRTCRtpReceiver::getSynchronizationSources[BEGIN]");var e=this;return b.remoteObjectManager.invokeMethod(e.parentLocalObjectId,"getSynchronizationSources",{trackId:e.track.id},(function(t,i){d.MMR_LOG("MmrRTCRtpReceiver::getSynchronizationSources[END] - result: 0x"+t.toString(16)),t>=0&&(e.ssrcs=i.ssrcs)})),this.ssrcs},e.prototype.initialize=function(e){var t=e.codecs,i=e.headerExtensions,n=e.rtcp;this.parameters={encodings:null,codecs:t,headerExtensions:i,rtcp:n}},e}(),M=function(){function e(e,t,i,n){this.mid=e,this.parentPeerConnection=t,this.sender=i,this.receiver=n}return Object.defineProperty(e.prototype,"direction",{get:function(){return this.internalDirection},set:function(e){if(d.MMR_LOG("MmrRTCRtpTransceiver::setDirection[BEGIN] - "+e),this.parentPeerConnection.isClosed)throw new DOMException("The RTCPeerConnection is closed","InvalidStateError");this.internalDirection=e;b.remoteObjectManager.invokeMethod(this.parentPeerConnection.localObjectId,"setTransceiverDirection",{mid:this.mid,direction:e},(function(e,t){console.log("MmrRTCRtpTransceiver::setDirection[END] - result: 0x"+e.toString(16))}))},enumerable:!1,configurable:!0}),e.prototype.setCodecPreferences=function(e){d.MMR_LOG("MmrRTCRtpTransceiver::setCodecPreferences - not implemented")},e.prototype.stop=function(){d.MMR_LOG("MmrRTCRtpTransceiver::stop - not implemented")},e}(),b=function(){function e(t){var i=this;this.localObjectId=0,this.remoteObjectActive=!1,this.isClosed=!1,this.connectionState_shim="new",this.originalRTCPeerConnection=null,this.configuration=null,this.senderMap=new Map,this.receiverMap=new Map,this.transceivers=new Array,this.channelMap=new Map,this.streamMap=new Map,this.nextChannelId=0,this.canTrickleIceCandidates=null,this.currentLocalDescription=null,this.currentRemoteDescription=null,this.iceConnectionState="new",this.iceGatheringState="new",this.idpErrorInfo=null,this.idpLoginUrl=null,this.peerIdentity=new Promise((function(e,t){e(null)})),this.pendingLocalDescription=null,this.pendingRemoteDescription=null,this.signalingState="stable",d.MMR_LOG("RTCPeerConnectionRedirect constructor, configuration: "+a.tryJsonStringify(t)),this.originalRTCPeerConnection=new e.originalRTCPeerConnectionClass(t),null!=t?(this.configuration=t,null==this.configuration.sdpSemantics&&(this.configuration.sdpSemantics="unified-plan")):this.configuration={sdpSemantics:"unified-plan"},e.eventHandlers.forEach((function(e){var t="_on"+e+"eventHandler";Object.defineProperty(i,"on"+e,{get:function(){return this[t]||null},set:function(i){this[t]&&(this.removeEventListener(e,this[t],null),delete this[t]),i&&(this[t]=i,this.addEventListener(e,this[t],null))}})})),e.remoteObjectManager.createObject(this,"RTCPeerConnection",{configuration:t,occlusionSupportVersion:e.occlusionSupportVersion})}return e.prototype.setAttribute=function(e,t){d.MMR_LOG("RTCPeerConnectionRedirect setAttribute "+e+"="+t),"connectionState"==e?this.connectionState_shim=t:this[e]=t},e.prototype.processIceCandidateEvent=function(e){var t=e,i=null;return null!=t.detail.candidate?(d.MMR_LOG("Received new ICE candidate: "+a.tryJsonStringify(t.detail.candidate)),i=new RTCIceCandidate({candidate:t.detail.candidate,sdpMLineIndex:t.detail.sdp_mline_index,sdpMid:t.detail.sdp_mid})):d.MMR_LOG("Null ICE candidate"),new RTCPeerConnectionIceEvent("icecandidate",{candidate:i})},e.prototype.processIceCandidateErrorEvent=function(e){var t=e,i={address:null!=t.detail.address?t.detail.address:null,errorCode:t.detail.error_code,errorText:t.detail.error_text,port:null!=t.detail.port?t.detail.port:null,url:t.detail.url};return new RTCPeerConnectionIceErrorEvent("icecandidateerror",i)},e.prototype.processTrackEvent=function(t){var i=this,n=t;d.MMR_LOG("RTCPeerConnectionRedirect::processTrackEvent - track: "+n.detail.trackId),d.MMR_LOG("RTCPeerConnectionRedirect::processTrackEvent - event: "+a.tryJsonStringify(n.detail));var o=s.createTrackRedirect(e.remoteObjectManager,n.detail.trackId,n.detail.trackLabel,null!=n.detail.settings?n.detail.settings:null,n.detail.kind);d.MMR_LOG("RTCPeerConnectionRedirect::processTrackEvent - stream0: "+n.detail.streamIds[0]);var r=n.detail.streamIds,l=new Array;r.forEach((function(e){var t=i.streamMap.get(e);if(null!=t)d.MMR_LOG("RTCPeerConnectionRedirect::processTrackEvent - using existing stream: "+e);else{d.MMR_LOG("RTCPeerConnectionRedirect::processTrackEvent - creating new stream: "+e);var n=new MediaStream;t=c.createMediaStreamShim(n,e),i.streamMap.set(e,t)}t.addTrack(o),l.push(t)}));var u=new f(this.localObjectId,o,n.detail);this.receiverMap.set(o.id,u);var h=n.detail.localTrackId,p=new m(this.localObjectId,null,h);this.senderMap.set(h,p);var b=new M(n.detail.transceiverMid,this,p,u);this.transceivers.push(b);var g=new CustomEvent("track",{});return Object.defineProperty(g,"receiver",{value:u,writable:!1,enumerable:!0}),Object.defineProperty(g,"streams",{value:l,writable:!1,enumerable:!0}),Object.defineProperty(g,"track",{value:o,writable:!1,enumerable:!0}),Object.defineProperty(g,"transceiver",{value:b,writable:!1,enumerable:!0}),g},e.prototype.processDataChannelEvent=function(t){var i=t,n=new l.RTCDataChannelRedirect(e.remoteObjectManager,this.localObjectId,i.detail.id,i.detail.label,i.detail.parameters,i.detail.uuid);i.detail.id>=0?this.channelMap[i.detail.id]=n:d.MMR_LOG("processDataChannelEvent: channel id is not yet available");var o=new CustomEvent("datachannel",{});return Object.defineProperty(o,"channel",{value:n,writable:!1,enumerable:!0}),o},e.prototype.processLocalDescriptionUpdate=function(e){var t;t=null!=e.sdp&&null!=e.type?new RTCSessionDescription({type:e.type,sdp:e.sdp}):null,null!=this.pendingLocalDescription?this.setAttribute("pendingLocalDescription",t):this.setAttribute("currentLocalDescription",t)},e.prototype.processSendersUpdate=function(e){this.senderMap.forEach((function(t,i){null!=e[i]&&t.initialize(e[i])}))},e.prototype.processReceiversUpdate=function(e){this.receiverMap.forEach((function(t,i){null!=e[i]&&t.initialize(e[i])}))},e.prototype.processTransceiversUpdate=function(e){this.transceivers.forEach((function(t){null!=e[t.sender.id]&&(t.mid=e[t.sender.id])}))},e.prototype.processToneChange=function(e){var t=this.senderMap.get(e.trackId);null!=t&&t.dtmf.processToneChange(e)},e.prototype.setLocalObjectId=function(e){this.localObjectId=e},e.prototype.getLocalObjectId=function(){return this.localObjectId},e.prototype.onRemoteObjectCreated=function(){this.remoteObjectActive=!0},e.prototype.invokeEvent=function(e){},e.prototype.invokeEventListener=function(e,t){console.log("RTCPeerConnectionRedirect::invokeEventListener - type: "+e.type),this.isClosed?console.log("RTCPeerConnectionRedirect::invokeEventListener: Ignoring event when closed."):("icecandidate"==e.type?e=this.processIceCandidateEvent(e):"icecandidateerror"==e.type?e=this.processIceCandidateErrorEvent(e):"track"==e.type?e=this.processTrackEvent(e):"datachannel"==e.type&&(e=this.processDataChannelEvent(e)),null!=t.handleEvent?t.handleEvent():(Object.defineProperty(e,"target",{value:this}),Object.defineProperty(e,"currentTarget",{value:this}),t(e)))},e.prototype.onAttributeUpdate=function(e,t){console.log("RTCPeerConnectionRedirect::onAttributeUpdate - name: "+e+", value: "+a.tryJsonStringify(t)),this.isClosed?console.log("RTCPeerConnectionRedirect::onAttributeUpdate: Ignoring attribute update when closed."):"localDescription"==e?this.processLocalDescriptionUpdate(t):"senders"==e?this.processSendersUpdate(t):"receivers"==e?this.processReceiversUpdate(t):"transceivers"==e?this.processTransceiversUpdate(t):"tonechange"==e?this.processToneChange(t):this.setAttribute(e,t)},e.prototype.onConnectionEvent=function(e){"clientConnected"==e?console.log("RTCPeerConnectionRedirect::onConnectionEvent - clientConnected"):"clientDisconnected"==e&&(this.remoteObjectActive=!1)},Object.defineProperty(e.prototype,"connectionState",{get:function(){return this.connectionState_shim},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"localDescription",{get:function(){return null!=this.pendingLocalDescription?this.pendingLocalDescription:this.currentLocalDescription},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"remoteDescription",{get:function(){return null!=this.pendingRemoteDescription?this.pendingRemoteDescription:this.currentRemoteDescription},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"sctp",{get:function(){return d.MMR_LOG("RTCPeerConnectionRedirect: sctp: Not yet implemented"),null},enumerable:!1,configurable:!0}),e.prototype.addIceCandidate=function(t){console.log("RTCPeerConnectionRedirect::addIceCandidate[BEGIN] - candidate: "+t.candidate);var i=this;return new Promise((function(n,o){e.remoteObjectManager.invokeMethod(i.localObjectId,"addIceCandidate",{candidate:t.candidate,sdpMLineIndex:t.sdpMLineIndex,sdpMid:t.sdpMid},(function(e,t){if(console.log("RTCPeerConnectionRedirect::addIceCandidate[END] - result: 0x"+e.toString(16)),e>=0){if(null!=t.sdp){var r=new h(t.type,t.sdp);null!=i.pendingRemoteDescription?i.setAttribute("pendingRemoteDescription",r):i.setAttribute("currentRemoteDescription",r)}n()}else o(a.mmrWebRtcStatusToDOMError(e))}))}))},e.prototype.addTrack=function(t){for(var i=[],n=1;n<arguments.length;n++)i[n-1]=arguments[n];if(console.log("RTCPeerConnectionRedirect::AddTrack[BEGIN] - track: "+t.id),null==t[a.shimPropertyName])throw new DOMException("The track is not a MSRDC track","NotSupportedError");if(this.isClosed)throw new DOMException("The RTCPeerConnection is closed","InvalidStateError");if(this.senderMap.has(t.id))throw new DOMException("The specified track is already part of the RTCPeerConnection","InvalidAccessError");i.forEach((function(e){e.addTrack(t)}));var o=new m(this.localObjectId,t,t.id);this.senderMap.set(t.id,o);var r=Array.from(i,(function(e){return e.id}));return e.remoteObjectManager.invokeMethod(this.localObjectId,"addTrack",{trackId:t.id,streamIds:r},(function(e,t){console.log("RTCPeerConnectionRedirect::AddTrack[END] - result: 0x"+e.toString(16)),e>=0&&o.initialize(t)})),o},e.prototype.addTransceiver=function(t,i){var n={};"string"==typeof t?n.kind=t:n.trackId=t.id,i&&(i.direction&&(n.direction=i.direction),i.streams&&(n.streamIds=Array.from(i.streams,(function(e){return e.id}))),i.sendEncodings&&(n.encodings=i.sendEncodings)),console.log("RTCPeerConnectionRedirect::addTransceiver[BEGIN] - Params: "+JSON.stringify(n));var o=new f(this.localObjectId,null,null),r=new m(this.localObjectId,null,""),a=new M("",this,r,o);a.internalDirection=n.direction?n.direction:"sendrecv",this.transceivers.push(a);var c=this;return e.remoteObjectManager.invokeMethod(this.localObjectId,"addTransceiver",n,(function(t,i){if(console.log("RTCPeerConnectionRedirect::addTransceiver[END] - result: 0x"+t.toString(16)),t>=0){a.internalDirection=i.direction,c.receiverMap.set(i.receiverId,o),r.setId(i.senderId),c.senderMap.set(i.senderId,r);var n=s.createTrackRedirect(e.remoteObjectManager,i.trackId,i.trackLabel,null!=i.settings?i.settings:null,i.kind);o.track=n}})),a},e.prototype.close=function(){if(d.MMR_LOG("RTCPeerConnectionRedirect::close[BEGIN]"),this.isClosed)d.MMR_LOG("RTCPeerConnectionRedirect::close[END] - was already closed.");else{var t=this;t.setAttribute("connectionState","closed"),t.setAttribute("iceConnectionState","closed"),t.setAttribute("iceGatheringState","closed"),t.setAttribute("signalingState","closed"),e.remoteObjectManager.invokeMethod(t.localObjectId,"close",{},(function(e,i){d.MMR_LOG("RTCPeerConnectionRedirect::close[END] - result: 0x"+e.toString(16)),t.isClosed=!0}))}},e.prototype.createAnswer=function(t){var i=this;return console.log("RTCPeerConnectionRedirect::createAnswer[BEGIN] - options: "+JSON.stringify(t)),new Promise((function(n,o){e.remoteObjectManager.invokeMethod(i.localObjectId,"createAnswer",{options:t},(function(e,t){console.log("RTCPeerConnectionRedirect::createAnswer[END] - result: 0x"+e.toString(16));var i=new h(t.type,t.sdp);e>=0?n(i):o(a.mmrWebRtcStatusToDOMError(e))}))}))},e.prototype.createDataChannel=function(t,i){if(d.MMR_LOG("RTCPeerConnectionRedirect: createDataChannel[BEGIN] - label: "+t+" params: "+JSON.stringify(i)),this.isClosed)throw new DOMException("The RTCPeerConnection is closed","InvalidStateError");if(t.length>65535)throw new TypeError("Label length is too long");if(null!=i){if(null!=i.protocol&&i.protocol.length>65535)throw new TypeError("Protocol length is too long");if(null!=i.maxPacketLifeTime&&null!=i.maxRetransmits)throw new TypeError("maxPacketLifeTime and maxRetransmits must not both be specified");if(null!=i.id){if(i.id<0||i.id>=65535)throw new TypeError("Invalid channel id value");if(this.channelMap.has(i.id))throw new DOMException("The data channel id is already in use","ResourceInUse")}}var n;if(null!=i&&null!=i.id)n=i.id;else{for(var o=0;o<65535;){if(this.nextChannelId=(this.nextChannelId+1)%65535,!this.channelMap.has(this.nextChannelId)){n=this.nextChannelId;break}++o}if(o>=65535)throw new DOMException("Too many data channels are already in use","OperationError")}var r=new l.RTCDataChannelRedirect(e.remoteObjectManager,this.localObjectId,n,t,i);return this.channelMap[n]=r,e.remoteObjectManager.invokeMethod(this.localObjectId,"createDataChannel",{label:t,id:n,uuid:r.uuid,parameters:i},(function(e,t){d.MMR_LOG("RTCPeerConnectionRedirect::createDataChannel[END] - result: 0x"+e.toString(16))})),r},e.prototype.createOffer=function(t){var i=this;return console.log("RTCPeerConnectionRedirect::createOffer[BEGIN] - options: "+JSON.stringify(t)),new Promise((function(n,o){e.remoteObjectManager.invokeMethod(i.localObjectId,"createOffer",{options:t},(function(e,t){console.log("RTCPeerConnectionRedirect::createOffer[END] - result: 0x"+e.toString(16));var i=new h("offer",t.sdp);e>=0?n(i):o(a.mmrWebRtcStatusToDOMError(e))}))}))},e.prototype.getConfiguration=function(){return this.configuration},e.prototype.getIdentityAssertion=function(){return new Promise((function(e,t){t(new DOMException("The operation is not supported","NotSupportedError"))}))},e.prototype.getReceivers=function(){return Array.from(this.receiverMap.values())},e.prototype.getSenders=function(){return Array.from(this.senderMap.values())},e.prototype.getStats=function(t){console.log("RTCPeerConnectionRedirect::getStats[START] selector: "+(null==t?void 0:t.id));var i=this;return new Promise((function(n,o){e.remoteObjectManager.invokeMethod(i.localObjectId,"getStats",{trackId:null==(null==t?void 0:t.id)?"":null==t?void 0:t.id},(function(e,t){if(console.log("RTCPeerConnectionRedirect::getStats[END] - result: 0x"+e.toString(16)),e>=0){var i=u(t);n(i)}else o(a.mmrWebRtcStatusToDOMError(e))}))}))},e.prototype.getTransceivers=function(){return this.transceivers},e.prototype.removeTrack=function(e){this.senderMap.delete(e.track.id)},e.prototype.setConfiguration=function(t){console.log("RTCPeerConnectionRedirect::setConfiguration[BEGIN] - configuration: "+JSON.stringify(t));var i=null!=this.configuration&&null!=this.configuration.bundlePolicy?this.configuration.bundlePolicy:"balanced",n=null!=t&&null!=t.bundlePolicy?t.bundlePolicy:"balanced",o=null!=this.configuration&&null!=this.configuration.rtcpMuxPolicy?this.configuration.rtcpMuxPolicy:"require",r=null!=t&&null!=t.rtcpMuxPolicy?t.rtcpMuxPolicy:"require";if(n!=i||r!=o)throw new DOMException("The object cannot be modified in this way","InvalidModificationError");this.configuration=t,e.remoteObjectManager.invokeMethod(this.localObjectId,"setConfiguration",{configuration:t},(function(e,t){console.log("RTCPeerConnectionRedirect::setConfiguration[END] - result: 0x"+e.toString(16))}))},e.prototype.setIdentityProvider=function(e,t){},e.prototype.setLocalDescription=function(t){console.log("RTCPeerConnectionRedirect::setLocalDescription[BEGIN] - description: "+JSON.stringify(t));var i=this;return i.setAttribute("pendingLocalDescription",t),new Promise((function(n,o){var r=JSON.parse(JSON.stringify(t));e.remoteObjectManager.invokeMethod(i.localObjectId,"setLocalDescription",{description:r},(function(e,t){console.log("RTCPeerConnectionRedirect::setLocalDescription[END] - result: 0x"+e.toString(16)),e>=0?(i.setAttribute("currentLocalDescription",i.pendingLocalDescription),i.setAttribute("pendingLocalDescription",null),n()):(i.setAttribute("pendingLocalDescription",null),o(a.mmrWebRtcStatusToDOMError(e)))}))}))},e.prototype.setRemoteDescription=function(t){console.log("RTCPeerConnectionRedirect::setRemoteDescription[BEGIN] - description: "+JSON.stringify(t));var i=this;return this.setAttribute("pendingRemoteDescription",t),this.setAttribute("canTrickleIceCandidates",!0),new Promise((function(n,o){var r=JSON.parse(JSON.stringify(t));e.remoteObjectManager.invokeMethod(i.localObjectId,"setRemoteDescription",{description:r},(function(e,t){console.log("RTCPeerConnectionRedirect::setRemoteDescription[END] - result: 0x"+e.toString(16)),e>=0?(i.setAttribute("currentRemoteDescription",i.pendingRemoteDescription),i.setAttribute("pendingRemoteDescription",null),n()):(i.setAttribute("pendingRemoteDescription",null),o(a.mmrWebRtcStatusToDOMError(e)))}))}))},e.prototype.addEventListener=function(t,i,n){console.log("RTCPeerConnectionRedirect::addEventListener - type: "+t),e.remoteObjectManager.addEventListener(this.localObjectId,t,i,n)},e.prototype.removeEventListener=function(t,i,n){console.log("RTCPeerConnectionRedirect::removeEventListener - type: "+t),e.remoteObjectManager.removeEventListener(this.localObjectId,t,i,n)},e.prototype.dispatchEvent=function(t){return console.log("RTCPeerConnectionRedirect::dispatchEvent - type: "+t.type),e.remoteObjectManager.dispatchEvent(this.localObjectId,t)},e.eventHandlers=["connectionstatechange","datachannel","icecandidate","icecandidateerror","iceconnectionstatechange","icegatheringstatechange","negotiationneeded","signalingstatechange","statsended","track"],e.remoteObjectManager=null,e.occlusionSupportVersion=0,e.originalRTCPeerConnectionClass=RTCPeerConnection,e}();t.RTCPeerConnectionRedirect=b,t.setupRTCPeerConnectionShims=function(e,t,i){console.log("Shimming RTCPeerConnection"),b.remoteObjectManager=e,b.occlusionSupportVersion=i,RTCPeerConnection=b}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RTCDataChannelRedirect=void 0;var n=i(1),o=i(0),r=function(){function e(t,i,n,o,r,a){var c=this;this.remoteObjectManager=t,this.localObjectId=0,this.remoteObjectActive=!1,this.isClosed=!1,this._bufferedAmount=0,this._bufferedAmountLowThreshold=0,this.binaryType="blob",this.id=null,this.maxPacketLifeTime=null,this.maxRetransmits=null,this.negotiated=!1,this.ordered=!0,this.priority="medium",this.protocol="",this.readyState="connecting",this.parentLocalObjectId=i,this.label=o,this.id=n,this.uuid=null!=a?a:crypto.randomUUID(),null!=r&&(this.maxPacketLifeTime=r.maxPacketLifeTime,this.maxRetransmits=r.maxRetransmits,this.negotiated=r.negotiated,this.ordered=r.ordered,this.priority=r.priority,this.protocol=r.protocol),e.eventHandlers.forEach((function(e){var t="_on"+e+"eventHandler";Object.defineProperty(c,"on"+e,{get:function(){return this[t]||null},set:function(i){this[t]&&(this.removeEventListener(e,this[t],null),delete this[t]),i&&(this[t]=i,this.addEventListener(e,this[t],null))}})})),this.remoteObjectManager.createObject(this,"RTCDataChannel",{uuid:this.uuid})}return Object.defineProperty(e.prototype,"bufferedAmount",{get:function(){return this.remoteObjectManager.invokeMethod(this.localObjectId,"bufferedAmount",{value:this._bufferedAmount},(function(e,t){})),this._bufferedAmount},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"bufferedAmountLowThreshold",{get:function(){return this._bufferedAmountLowThreshold},set:function(e){o.MMR_LOG("RTCDataChannelRedirect::bufferedAmountLowThreshold="+e),this._bufferedAmountLowThreshold=e,this.remoteObjectManager.invokeMethod(this.localObjectId,"bufferedAmountLowThreshold",{value:e},(function(e,t){}))},enumerable:!1,configurable:!0}),e.prototype.close=function(){o.MMR_LOG("RTCDataChannelRedirect::close"),this.remoteObjectManager.invokeMethod(this.localObjectId,"close",{},(function(e,t){}))},e.prototype.send=function(e){function t(e){for(var t="",i=new Uint8Array(e),n=i.byteLength,o=0;o<n;o++)t+=String.fromCharCode(i[o]);return window.btoa(t)}if(o.MMR_LOG("RTCDataChannelRedirect::send"),null!=e.byteLength){var i=e;this.remoteObjectManager.invokeMethod(this.localObjectId,"send",{message:t(i),isBinary:!0},(function(e,t){}))}else if(null!=e.buffer){var n=e;this.remoteObjectManager.invokeMethod(this.localObjectId,"send",{message:t(n.buffer),isBinary:!0},(function(e,t){}))}else if(null!=e.type){var r=this;e.arrayBuffer().then((function(e){r.remoteObjectManager.invokeMethod(r.localObjectId,"send",{message:t(e),isBinary:!0},(function(e,t){}))})).catch((function(e){o.MMR_LOG("RTCDataChannelRedirect::send - error converting Blob to ArrayBuffer: "+e.toString())}))}else this.remoteObjectManager.invokeMethod(this.localObjectId,"send",{message:e,isBinary:!1},(function(e,t){}))},e.prototype.addEventListener=function(e,t,i){o.MMR_LOG("RTCDataChannelRedirect::addEventListener - type: "+e),this.remoteObjectManager.addEventListener(this.localObjectId,e,t,i)},e.prototype.removeEventListener=function(e,t,i){o.MMR_LOG("RTCDataChannelRedirect::removeEventListener - type: "+e),this.remoteObjectManager.removeEventListener(this.localObjectId,e,t,i)},e.prototype.dispatchEvent=function(e){return o.MMR_LOG("RTCDataChannelRedirect::dispatchEvent - type: "+e.type),this.remoteObjectManager.dispatchEvent(this.localObjectId,e)},e.prototype.setLocalObjectId=function(e){this.localObjectId=e},e.prototype.getLocalObjectId=function(){return this.localObjectId},e.prototype.onRemoteObjectCreated=function(){this.remoteObjectActive=!0},e.prototype.invokeEvent=function(e){},e.prototype.invokeEventListener=function(e,t){o.MMR_LOG("RTCDataChannelRedirect::invokeEventListener - type: "+e.type),this.isClosed&&"close"!=e.type?o.MMR_LOG("RTCDataChannelRedirect::invokeEventListener: Ignoring event when closed."):("message"==e.type?e=this.processMessageEvent(e):"error"==e.type&&(e=this.processErrorEvent(e)),null!=t.handleEvent?t.handleEvent():(Object.defineProperty(e,"target",{value:this}),Object.defineProperty(e,"currentTarget",{value:this}),t(e)))},e.prototype.onAttributeUpdate=function(e,t){o.MMR_LOG("RTCDataChannelRedirect::onAttributeUpdate - name: "+e+", value: "+n.tryJsonStringify(t)),this.isClosed?o.MMR_LOG("RTCDataChannelRedirect::onAttributeUpdate: Ignoring attribute update when closed."):this.setAttribute(e,t)},e.prototype.onConnectionEvent=function(e){"clientConnected"==e?o.MMR_LOG("RTCDataChannelRedirect::onConnectionEvent - clientConnected"):"clientDisconnected"==e&&(this.remoteObjectActive=!1)},e.prototype.setAttribute=function(e,t){"bufferedAmount"==e?this._bufferedAmount=t:"bufferedAmountLowThreshold"==e?this._bufferedAmountLowThreshold=t:this[e]=t,"readyState"==e&&"closed"==this.readyState&&(this.isClosed=!0)},e.prototype.processMessageEvent=function(e){var t,i=e;if(i.detail.isBinary){var n=Uint8Array.from(atob(i.detail.message),(function(e){return e.charCodeAt(0)}));t="blob"==this.binaryType?new MessageEvent("message",{data:new Blob([n.buffer])}):new MessageEvent("message",{data:n.buffer})}else{var o=i.detail.message;t=new MessageEvent("message",{data:o})}return t},e.prototype.processErrorEvent=function(e){var t=e,i=new RTCError({errorDetail:t.detail.errorDetail,receivedAlert:t.detail.receivedAlert,sctpCauseCode:t.detail.sctpCauseCode,sdpLineNumber:t.detail.sdpLineNumber,sentAlert:t.detail.sentAlert},t.detail.message);return new RTCErrorEvent("error",{error:i})},e.eventHandlers=["bufferedamountlow","close","closing","error","message","open"],e}();t.RTCDataChannelRedirect=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,